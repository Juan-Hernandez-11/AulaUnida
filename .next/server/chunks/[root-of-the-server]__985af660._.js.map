{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/lib/firebaseAdmin.ts"],"sourcesContent":["import { initializeApp, getApps, cert } from 'firebase-admin/app';\r\n\r\nexport function initFirebaseAdmin() {\r\n  if (!getApps().length) {\r\n    initializeApp({\r\n      credential: cert({\r\n        projectId: process.env.FIREBASE_PROJECT_ID,\r\n        clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\r\n        privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\\\n/g, '\\n'),\r\n      }),\r\n    });\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;;;;;;AAEO,SAAS;IACd,IAAI,CAAC,IAAA,2JAAO,IAAG,MAAM,EAAE;QACrB,IAAA,iKAAa,EAAC;YACZ,YAAY,IAAA,wJAAI,EAAC;gBACf,WAAW,QAAQ,GAAG,CAAC,mBAAmB;gBAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;gBAC9C,YAAY,QAAQ,GAAG,CAAC,oBAAoB,EAAE,QAAQ,QAAQ;YAChE;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/lib/requireAdmin.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { getAuth } from 'firebase-admin/auth';\r\nimport { initFirebaseAdmin } from './firebaseAdmin';\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\ninitFirebaseAdmin();\r\nconst prisma = new PrismaClient();\r\n\r\n/**\r\n * Verifica el token de Firebase y que el usuario tenga rol 'admin'.\r\n * Si no es válido, retorna una respuesta 401/403. Si es válido, retorna el usuario.\r\n */\r\nexport async function requireAdmin(request: Request) {\r\n  try {\r\n    const authHeader = request.headers.get('authorization');\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n      return NextResponse.json({ error: 'No autorizado (token faltante)' }, { status: 401 });\r\n    }\r\n    const idToken = authHeader.replace('Bearer ', '');\r\n    const decoded = await getAuth().verifyIdToken(idToken);\r\n    // Busca el usuario en la base de datos y verifica el rol\r\n    const user = await prisma.user.findUnique({\r\n      where: { firebaseUid: decoded.uid },\r\n      select: { id: true, email: true, role: true },\r\n    });\r\n    if (!user || user.role !== 'ADMIN') {\r\n      return NextResponse.json({ error: 'No autorizado (solo admin)' }, { status: 403 });\r\n    }\r\n    return user;\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'No autorizado (token inválido)' }, { status: 401 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;;;;;;AAEA,IAAA,kJAAiB;AACjB,MAAM,SAAS,IAAI,6IAAY;AAMxB,eAAe,aAAa,OAAgB;IACjD,IAAI;QACF,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;QACvC,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CAAC,YAAY;YACpD,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiC,GAAG;gBAAE,QAAQ;YAAI;QACtF;QACA,MAAM,UAAU,WAAW,OAAO,CAAC,WAAW;QAC9C,MAAM,UAAU,MAAM,IAAA,6JAAO,IAAG,aAAa,CAAC;QAC9C,yDAAyD;QACzD,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE,aAAa,QAAQ,GAAG;YAAC;YAClC,QAAQ;gBAAE,IAAI;gBAAM,OAAO;gBAAM,MAAM;YAAK;QAC9C;QACA,IAAI,CAAC,QAAQ,KAAK,IAAI,KAAK,SAAS;YAClC,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA6B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiC,GAAG;YAAE,QAAQ;QAAI;IACtF;AACF","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/app/api/admin/usuarios/route.ts"],"sourcesContent":["// GET /api/admin/usuarios/estudiantes: Devuelve solo los usuarios con rol STUDENT\r\nexport async function GET_STUDENTS(request: Request) {\r\n  const admin = await requireAdmin(request);\r\n  if ('error' in admin) return admin;\r\n  try {\r\n    const students = await prisma.user.findMany({\r\n      where: { role: 'STUDENT' },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        role: true,\r\n      },\r\n      orderBy: { id: 'asc' },\r\n    });\r\n    return NextResponse.json(students);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al obtener estudiantes' }, { status: 500 });\r\n  }\r\n}\r\nimport { NextResponse } from 'next/server';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport { requireAdmin } from '@/lib/requireAdmin';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// PUT: Edita un usuario existente. Body: { id, name, email, role, documentType, documentNumber, birthDate, phone, address, gender, photoUrl }\r\nexport async function PUT(request: Request) {\r\n  const admin = await requireAdmin(request);\r\n  if ('error' in admin) return admin;\r\n  try {\r\n    const body = await request.json();\r\n    const {\r\n      id, name, email, role, documentType, documentNumber, birthDate, phone, address, gender, photoUrl\r\n    } = body || {};\r\n    if (!id) {\r\n      return NextResponse.json({ error: 'El id es obligatorio.', field: 'id' }, { status: 400 });\r\n    }\r\n    if (!name || typeof name !== 'string') {\r\n      return NextResponse.json({ error: 'El nombre es obligatorio.', field: 'name' }, { status: 400 });\r\n    }\r\n    if (!email || typeof email !== 'string') {\r\n      return NextResponse.json({ error: 'El correo es obligatorio.', field: 'email' }, { status: 400 });\r\n    }\r\n    if (!role || typeof role !== 'string') {\r\n      return NextResponse.json({ error: 'El rol es obligatorio.', field: 'role' }, { status: 400 });\r\n    }\r\n    if (!documentNumber || typeof documentNumber !== 'string') {\r\n      return NextResponse.json({ error: 'El número de documento es obligatorio.', field: 'documentNumber' }, { status: 400 });\r\n    }\r\n    // Validar role permitido\r\n    const allowedRoles = ['ADMIN', 'DOCENTE', 'ESTUDIANTE', 'STUDENT'];\r\n    if (!allowedRoles.includes(role.toUpperCase())) {\r\n      return NextResponse.json({ error: 'Rol no permitido.', field: 'role' }, { status: 400 });\r\n    }\r\n    // Correo único y formato\r\n    const emailRegex = /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/;\r\n    if (!emailRegex.test(email)) {\r\n      return NextResponse.json({ error: 'Correo electrónico inválido.', field: 'email' }, { status: 400 });\r\n    }\r\n    const existingEmail = await prisma.user.findUnique({ where: { email } });\r\n    if (existingEmail && existingEmail.id !== id) {\r\n      return NextResponse.json({ error: 'El correo ya está registrado.', field: 'email' }, { status: 400 });\r\n    }\r\n    // Documento único y formato\r\n    if (!/^\\d{5,}$/.test(documentNumber)) {\r\n      return NextResponse.json({ error: 'El número de documento debe ser numérico y mínimo 5 dígitos.', field: 'documentNumber' }, { status: 400 });\r\n    }\r\n    const existingDoc = await prisma.user.findUnique({ where: { documentNumber } });\r\n    if (existingDoc && existingDoc.id !== id) {\r\n      return NextResponse.json({ error: 'El número de documento ya está registrado.', field: 'documentNumber' }, { status: 400 });\r\n    }\r\n    // Nombre: solo letras y espacios, mínimo 3 caracteres\r\n    if (!/^[A-Za-zÁÉÍÓÚáéíóúÑñ ]{3,}$/.test(name.trim())) {\r\n      return NextResponse.json({ error: 'El nombre debe tener solo letras y al menos 3 caracteres.', field: 'name' }, { status: 400 });\r\n    }\r\n    // Fecha de nacimiento: no futura, edad mínima 5 años\r\n    if (!birthDate || typeof birthDate !== 'string') {\r\n      return NextResponse.json({ error: 'La fecha de nacimiento es obligatoria.', field: 'birthDate' }, { status: 400 });\r\n    }\r\n    const birth = new Date(birthDate);\r\n    const now = new Date();\r\n    if (birth > now) {\r\n      return NextResponse.json({ error: 'La fecha de nacimiento no puede ser futura.', field: 'birthDate' }, { status: 400 });\r\n    }\r\n    const age = now.getFullYear() - birth.getFullYear() - (now < new Date(now.getFullYear(), birth.getMonth(), birth.getDate()) ? 1 : 0);\r\n    if (age < 5) {\r\n      return NextResponse.json({ error: 'La edad mínima es 5 años.', field: 'birthDate' }, { status: 400 });\r\n    }\r\n    // Teléfono: solo números, 7-10 dígitos, no empieza por 0\r\n    if (!phone || typeof phone !== 'string' || !/^\\d{7,10}$/.test(phone) || phone.startsWith('0')) {\r\n      return NextResponse.json({ error: 'El teléfono debe tener entre 7 y 10 dígitos, no empezar por 0.', field: 'phone' }, { status: 400 });\r\n    }\r\n    // Dirección: mínimo 5 caracteres\r\n    if (!address || typeof address !== 'string' || address.trim().length < 5) {\r\n      return NextResponse.json({ error: 'La dirección debe tener al menos 5 caracteres.', field: 'address' }, { status: 400 });\r\n    }\r\n    // Género: solo M, F, O\r\n    if (!['M', 'F', 'O'].includes(gender)) {\r\n      return NextResponse.json({ error: 'El género debe ser M, F u O.', field: 'gender' }, { status: 400 });\r\n    }\r\n    // Foto: si se envía, debe ser url de imagen (opcional, solo si se usa)\r\n    if (photoUrl && (typeof photoUrl !== 'string' || !/^https?:\\/\\/.+\\.(jpg|jpeg|png|gif|webp)$/i.test(photoUrl))) {\r\n      return NextResponse.json({ error: 'La foto debe ser una URL de imagen válida.', field: 'photoUrl' }, { status: 400 });\r\n    }\r\n    // Mapear role del frontend a enum Prisma\r\n    const roleMap: Record<string, 'ADMIN' | 'DOCENTE' | 'STUDENT'> = {\r\n      'ADMIN': 'ADMIN',\r\n      'admin': 'ADMIN',\r\n      'DOCENTE': 'DOCENTE',\r\n      'docente': 'DOCENTE',\r\n      'ESTUDIANTE': 'STUDENT',\r\n      'estudiante': 'STUDENT',\r\n      'STUDENT': 'STUDENT',\r\n    };\r\n    const prismaRole = roleMap[role] || 'STUDENT';\r\n    // Actualizar usuario en la base de datos\r\n    const user = await prisma.user.update({\r\n      where: { id },\r\n      data: {\r\n        name,\r\n        email,\r\n        role: prismaRole,\r\n        documentType: documentType || null,\r\n        documentNumber: documentNumber || null,\r\n        birthDate: birthDate ? new Date(birthDate) : null,\r\n        phone: phone || null,\r\n        address: address || null,\r\n        gender: gender || null,\r\n        photoUrl: photoUrl || null\r\n      },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        role: true,\r\n        documentType: true,\r\n        documentNumber: true,\r\n        birthDate: true,\r\n        phone: true,\r\n        address: true,\r\n        gender: true,\r\n        photoUrl: true\r\n      }\r\n    });\r\n    return NextResponse.json(user);\r\n  } catch (error) {\r\n    console.error('Error al editar usuario:', error);\r\n    return NextResponse.json({ error: 'Error al editar usuario', details: (error && typeof error === 'object' && 'message' in error) ? (error as any).message : String(error) }, { status: 500 });\r\n  }\r\n}\r\n\r\n// DELETE: Elimina un usuario. Body: { id }\r\nexport async function DELETE(request: Request) {\r\n  const admin = await requireAdmin(request);\r\n  if ('error' in admin) return admin;\r\n  try {\r\n    const body = await request.json();\r\n    const { id } = body;\r\n    if (!id) {\r\n      return NextResponse.json({ error: 'Falta el id' }, { status: 400 });\r\n    }\r\n    await prisma.user.delete({ where: { id } });\r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al eliminar usuario' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// GET: Devuelve todos los usuarios (id, name, email, role)\r\nexport async function GET(request: Request) {\r\n  const admin = await requireAdmin(request);\r\n  if ('error' in admin) return admin;\r\n  try {\r\n    const users = await prisma.user.findMany({\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        role: true,\r\n      },\r\n      orderBy: { id: 'asc' },\r\n    });\r\n    return NextResponse.json(users);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al obtener usuarios' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST: Crea un usuario nuevo en Firebase Auth y en la base de datos. Body: { name, email, role, documentType, documentNumber, birthDate, phone, address, gender, photoUrl }\r\nimport { initFirebaseAdmin } from '@/lib/firebaseAdmin';\r\nimport { getAuth } from 'firebase-admin/auth';\r\n\r\nexport async function POST(request: Request) {\r\n  const admin = await requireAdmin(request);\r\n  if ('error' in admin) return admin;\r\n  try {\r\n    const body = await request.json();\r\n    const {\r\n      name, email, role, documentType, documentNumber, birthDate, phone, address, gender, photoUrl\r\n    } = body || {};\r\n\r\n    // Validar campos obligatorios y tipos\r\n    if (!name || typeof name !== 'string') {\r\n      return NextResponse.json({ error: 'El nombre es obligatorio.', field: 'name' }, { status: 400 });\r\n    }\r\n    if (!email || typeof email !== 'string') {\r\n      return NextResponse.json({ error: 'El correo es obligatorio.', field: 'email' }, { status: 400 });\r\n    }\r\n    if (!role || typeof role !== 'string') {\r\n      return NextResponse.json({ error: 'El rol es obligatorio.', field: 'role' }, { status: 400 });\r\n    }\r\n    if (!documentNumber || typeof documentNumber !== 'string') {\r\n      return NextResponse.json({ error: 'El número de documento es obligatorio.', field: 'documentNumber' }, { status: 400 });\r\n    }\r\n\r\n    // Validar role permitido\r\n    const allowedRoles = ['ADMIN', 'DOCENTE', 'ESTUDIANTE'];\r\n    if (!allowedRoles.includes(role.toUpperCase())) {\r\n      return NextResponse.json({ error: 'Rol no permitido.', field: 'role' }, { status: 400 });\r\n    }\r\n\r\n    // Validaciones robustas de datos personales en backend\r\n    // Correo único y formato\r\n    const emailRegex = /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/;\r\n    if (!emailRegex.test(email)) {\r\n      return NextResponse.json({ error: 'Correo electrónico inválido.', field: 'email' }, { status: 400 });\r\n    }\r\n    const existingEmail = await prisma.user.findUnique({ where: { email } });\r\n    if (existingEmail) {\r\n      return NextResponse.json({ error: 'El correo ya está registrado.', field: 'email' }, { status: 400 });\r\n    }\r\n    // Documento único y formato\r\n    if (!/^\\d{5,}$/.test(documentNumber)) {\r\n      return NextResponse.json({ error: 'El número de documento debe ser numérico y mínimo 5 dígitos.', field: 'documentNumber' }, { status: 400 });\r\n    }\r\n    const existingDoc = await prisma.user.findUnique({ where: { documentNumber } });\r\n    if (existingDoc) {\r\n      return NextResponse.json({ error: 'El número de documento ya está registrado.', field: 'documentNumber' }, { status: 400 });\r\n    }\r\n    // Nombre: solo letras y espacios, mínimo 3 caracteres\r\n    if (!/^[A-Za-zÁÉÍÓÚáéíóúÑñ ]{3,}$/.test(name.trim())) {\r\n      return NextResponse.json({ error: 'El nombre debe tener solo letras y al menos 3 caracteres.', field: 'name' }, { status: 400 });\r\n    }\r\n    // Fecha de nacimiento: no futura, edad mínima 5 años\r\n    if (!birthDate || typeof birthDate !== 'string') {\r\n      return NextResponse.json({ error: 'La fecha de nacimiento es obligatoria.', field: 'birthDate' }, { status: 400 });\r\n    }\r\n    const birth = new Date(birthDate);\r\n    const now = new Date();\r\n    if (birth > now) {\r\n      return NextResponse.json({ error: 'La fecha de nacimiento no puede ser futura.', field: 'birthDate' }, { status: 400 });\r\n    }\r\n    const age = now.getFullYear() - birth.getFullYear() - (now < new Date(now.getFullYear(), birth.getMonth(), birth.getDate()) ? 1 : 0);\r\n    if (age < 5) {\r\n      return NextResponse.json({ error: 'La edad mínima es 5 años.', field: 'birthDate' }, { status: 400 });\r\n    }\r\n    // Teléfono: solo números, 7-10 dígitos, no empieza por 0\r\n    if (!phone || typeof phone !== 'string' || !/^\\d{7,10}$/.test(phone) || phone.startsWith('0')) {\r\n      return NextResponse.json({ error: 'El teléfono debe tener entre 7 y 10 dígitos, no empezar por 0.', field: 'phone' }, { status: 400 });\r\n    }\r\n    // Dirección: mínimo 5 caracteres\r\n    if (!address || typeof address !== 'string' || address.trim().length < 5) {\r\n      return NextResponse.json({ error: 'La dirección debe tener al menos 5 caracteres.', field: 'address' }, { status: 400 });\r\n    }\r\n    // Género: solo M, F, O\r\n    if (!['M', 'F', 'O'].includes(gender)) {\r\n      return NextResponse.json({ error: 'El género debe ser M, F u O.', field: 'gender' }, { status: 400 });\r\n    }\r\n    // Foto: si se envía, debe ser url de imagen (opcional, solo si se usa)\r\n    if (photoUrl && (typeof photoUrl !== 'string' || !/^https?:\\/\\/.+\\.(jpg|jpeg|png|gif|webp)$/i.test(photoUrl))) {\r\n      return NextResponse.json({ error: 'La foto debe ser una URL de imagen válida.', field: 'photoUrl' }, { status: 400 });\r\n    }\r\n\r\n    // Inicializar Firebase Admin\r\n    initFirebaseAdmin();\r\n    const auth = getAuth();\r\n\r\n    // Verificar si el usuario ya existe en Firebase Auth\r\n    try {\r\n      await auth.getUserByEmail(email);\r\n      // Si existe en Firebase, unificar mensaje con el de la base de datos\r\n      return NextResponse.json({ error: 'El correo ya está registrado.', field: 'email' }, { status: 400 });\r\n    } catch (e) {\r\n      // Si no existe, se crea\r\n    }\r\n\r\n    // (Futuro) Validar archivo de foto si se implementa subida\r\n\r\n    // Crear usuario en Firebase Auth con la contraseña igual al número de documento\r\n    const createdUser = await auth.createUser({\r\n      email,\r\n      password: documentNumber,\r\n      displayName: name,\r\n      photoURL: photoUrl || undefined,\r\n      emailVerified: false\r\n    });\r\n\r\n    // Mapear role del frontend a enum Prisma\r\n    const roleMap: Record<string, 'ADMIN' | 'DOCENTE' | 'STUDENT'> = {\r\n      'ADMIN': 'ADMIN',\r\n      'admin': 'ADMIN',\r\n      'DOCENTE': 'DOCENTE',\r\n      'docente': 'DOCENTE',\r\n      'ESTUDIANTE': 'STUDENT',\r\n      'estudiante': 'STUDENT',\r\n      'STUDENT': 'STUDENT',\r\n    };\r\n    const prismaRole = roleMap[role] || 'STUDENT';\r\n\r\n    // Guardar usuario en la base de datos\r\n    const user = await prisma.user.create({\r\n      data: {\r\n        name,\r\n        email,\r\n        role: prismaRole,\r\n        firebaseUid: createdUser.uid,\r\n        passwordHash: '',\r\n        documentType: documentType || null,\r\n        documentNumber: documentNumber || null,\r\n        birthDate: birthDate ? new Date(birthDate) : null,\r\n        phone: phone || null,\r\n        address: address || null,\r\n        gender: gender || null,\r\n        photoUrl: photoUrl || null\r\n      },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        role: true,\r\n        firebaseUid: true,\r\n        documentType: true,\r\n        documentNumber: true,\r\n        birthDate: true,\r\n        phone: true,\r\n        address: true,\r\n        gender: true,\r\n        photoUrl: true\r\n      }\r\n    });\r\n    return NextResponse.json(user);\r\n  } catch (error) {\r\n    console.error('Error al crear usuario:', error);\r\n    return NextResponse.json({ error: 'Error al crear usuario', details: (error && typeof error === 'object' && 'message' in error) ? (error as any).message : String(error) }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}