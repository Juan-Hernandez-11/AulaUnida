{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/app/api/admin/grados/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// GET: Devuelve todos los grados (id, nombre, seccion)\r\nexport async function GET() {\r\n  try {\r\n    const grados = await prisma.grado.findMany({\r\n      select: { id: true, nombre: true, seccion: true },\r\n      orderBy: { nombre: 'asc' },\r\n    });\r\n    return NextResponse.json(grados);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al obtener grados' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST: Crea un grado. Body: { nombre, seccion, sedeId, cicloId, aulaId? }\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const { nombre, seccion, sedeId, cicloId, aulaId } = await request.json();\r\n    if (\r\n      typeof nombre !== 'string' || !nombre.trim() ||\r\n      typeof seccion !== 'string' || !seccion.trim() ||\r\n      typeof sedeId !== 'number' || isNaN(sedeId) ||\r\n      typeof cicloId !== 'number' || isNaN(cicloId)\r\n    ) {\r\n      return NextResponse.json({ error: 'Faltan campos obligatorios o tipos incorrectos' }, { status: 400 });\r\n    }\r\n    // Validar existencia de sede\r\n    const sede = await prisma.sede.findUnique({ where: { id: sedeId } });\r\n    if (!sede) {\r\n      return NextResponse.json({ error: 'La sede especificada no existe' }, { status: 400 });\r\n    }\r\n    // Validar existencia de ciclo\r\n    const ciclo = await prisma.ciclo.findUnique({ where: { id: cicloId } });\r\n    if (!ciclo) {\r\n      return NextResponse.json({ error: 'El ciclo especificado no existe' }, { status: 400 });\r\n    }\r\n    // Validar existencia de aula si se envía\r\n    let aula = null;\r\n    if (aulaId !== undefined && aulaId !== null) {\r\n      if (typeof aulaId !== 'number' || isNaN(aulaId)) {\r\n        return NextResponse.json({ error: 'El aulaId debe ser un número válido' }, { status: 400 });\r\n      }\r\n      aula = await prisma.aula.findUnique({ where: { id: aulaId } });\r\n      if (!aula) {\r\n        return NextResponse.json({ error: 'El aula especificada no existe' }, { status: 400 });\r\n      }\r\n    }\r\n    // Validar unicidad de nombre+seccion+sede+ciclo\r\n    const existe = await prisma.grado.findFirst({\r\n      where: {\r\n        nombre: nombre.trim(),\r\n        seccion: seccion.trim(),\r\n        sedeId,\r\n        cicloId,\r\n      },\r\n    });\r\n    if (existe) {\r\n      return NextResponse.json({ error: 'Ya existe un grado con ese nombre, sección, sede y ciclo.' }, { status: 409 });\r\n    }\r\n    const grado = await prisma.grado.create({\r\n      data: { nombre: nombre.trim(), seccion: seccion.trim(), sedeId, cicloId, aulaId: aulaId ?? undefined },\r\n      select: { id: true, nombre: true, seccion: true },\r\n    });\r\n    return NextResponse.json(grado);\r\n  } catch (error: any) {\r\n    if (error.code && error.code.startsWith('P')) {\r\n      return NextResponse.json({ error: 'Error de base de datos: ' + error.message }, { status: 500 });\r\n    }\r\n    return NextResponse.json({ error: 'Error al crear grado' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// PUT: Edita un grado. Body: { id, nombre, seccion, sedeId, cicloId, aulaId? }\r\nexport async function PUT(request: Request) {\r\n  try {\r\n    const { id, nombre, seccion, sedeId, cicloId, aulaId } = await request.json();\r\n    if (\r\n      typeof id !== 'number' || isNaN(id) ||\r\n      typeof nombre !== 'string' || !nombre.trim() ||\r\n      typeof seccion !== 'string' || !seccion.trim() ||\r\n      typeof sedeId !== 'number' || isNaN(sedeId) ||\r\n      typeof cicloId !== 'number' || isNaN(cicloId)\r\n    ) {\r\n      return NextResponse.json({ error: 'Faltan campos obligatorios o tipos incorrectos' }, { status: 400 });\r\n    }\r\n    // Validar existencia de sede\r\n    const sede = await prisma.sede.findUnique({ where: { id: sedeId } });\r\n    if (!sede) {\r\n      return NextResponse.json({ error: 'La sede especificada no existe' }, { status: 400 });\r\n    }\r\n    // Validar existencia de ciclo\r\n    const ciclo = await prisma.ciclo.findUnique({ where: { id: cicloId } });\r\n    if (!ciclo) {\r\n      return NextResponse.json({ error: 'El ciclo especificado no existe' }, { status: 400 });\r\n    }\r\n    // Validar existencia de aula si se envía\r\n    let aula = null;\r\n    if (aulaId !== undefined && aulaId !== null) {\r\n      if (typeof aulaId !== 'number' || isNaN(aulaId)) {\r\n        return NextResponse.json({ error: 'El aulaId debe ser un número válido' }, { status: 400 });\r\n      }\r\n      aula = await prisma.aula.findUnique({ where: { id: aulaId } });\r\n      if (!aula) {\r\n        return NextResponse.json({ error: 'El aula especificada no existe' }, { status: 400 });\r\n      }\r\n    }\r\n    // Validar unicidad de nombre+seccion+sede+ciclo (excluyendo el propio grado)\r\n    const existe = await prisma.grado.findFirst({\r\n      where: {\r\n        nombre: nombre.trim(),\r\n        seccion: seccion.trim(),\r\n        sedeId,\r\n        cicloId,\r\n        NOT: { id },\r\n      },\r\n    });\r\n    if (existe) {\r\n      return NextResponse.json({ error: 'Ya existe un grado con ese nombre, sección, sede y ciclo.' }, { status: 409 });\r\n    }\r\n    const grado = await prisma.grado.update({\r\n      where: { id },\r\n      data: { nombre: nombre.trim(), seccion: seccion.trim(), sedeId, cicloId, aulaId: aulaId ?? undefined },\r\n      select: { id: true, nombre: true, seccion: true },\r\n    });\r\n    return NextResponse.json(grado);\r\n  } catch (error: any) {\r\n    if (error.code && error.code.startsWith('P')) {\r\n      return NextResponse.json({ error: 'Error de base de datos: ' + error.message }, { status: 500 });\r\n    }\r\n    return NextResponse.json({ error: 'Error al editar grado' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// DELETE: Elimina un grado. Body: { id }\r\nexport async function DELETE(request: Request) {\r\n  try {\r\n    const { id } = await request.json();\r\n    if (typeof id !== 'number' || isNaN(id)) {\r\n      return NextResponse.json({ error: 'Falta el id o el id no es válido' }, { status: 400 });\r\n    }\r\n    await prisma.grado.delete({ where: { id } });\r\n    return NextResponse.json({ success: true });\r\n  } catch (error: any) {\r\n    if (error.code && error.code.startsWith('P')) {\r\n      return NextResponse.json({ error: 'Error de base de datos: ' + error.message }, { status: 500 });\r\n    }\r\n    return NextResponse.json({ error: 'Error al eliminar grado' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}