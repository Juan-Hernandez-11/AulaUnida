{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/lib/firebaseAdmin.ts"],"sourcesContent":["import { initializeApp, getApps, cert } from 'firebase-admin/app';\r\n\r\nexport function initFirebaseAdmin() {\r\n  if (!getApps().length) {\r\n    initializeApp({\r\n      credential: cert({\r\n        projectId: process.env.FIREBASE_PROJECT_ID,\r\n        clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\r\n        privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\\\n/g, '\\n'),\r\n      }),\r\n    });\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;;;;;;AAEO,SAAS;IACd,IAAI,CAAC,IAAA,2JAAO,IAAG,MAAM,EAAE;QACrB,IAAA,iKAAa,EAAC;YACZ,YAAY,IAAA,wJAAI,EAAC;gBACf,WAAW,QAAQ,GAAG,CAAC,mBAAmB;gBAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;gBAC9C,YAAY,QAAQ,GAAG,CAAC,oBAAoB,EAAE,QAAQ,QAAQ;YAChE;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/app/api/admin/docentes/route.ts"],"sourcesContent":["// PUT: Editar docente (igual que usuarios, pero solo rol DOCENTE)\r\nexport async function PUT(request: Request) {\r\n  try {\r\n    const body = await request.json();\r\n    const {\r\n      id, name, email, documentType, documentNumber, birthDate, phone, address, gender, photoUrl\r\n    } = body || {};\r\n    if (!id) {\r\n      return NextResponse.json({ error: 'El id es obligatorio.', field: 'id' }, { status: 400 });\r\n    }\r\n    if (!name || typeof name !== 'string') {\r\n      return NextResponse.json({ error: 'El nombre es obligatorio.', field: 'name' }, { status: 400 });\r\n    }\r\n    if (!email || typeof email !== 'string') {\r\n      return NextResponse.json({ error: 'El correo es obligatorio.', field: 'email' }, { status: 400 });\r\n    }\r\n    if (!documentNumber || typeof documentNumber !== 'string') {\r\n      return NextResponse.json({ error: 'El número de documento es obligatorio.', field: 'documentNumber' }, { status: 400 });\r\n    }\r\n    // Validaciones robustas\r\n    const emailRegex = /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/;\r\n    if (!emailRegex.test(email)) {\r\n      return NextResponse.json({ error: 'Correo electrónico inválido.', field: 'email' }, { status: 400 });\r\n    }\r\n    const existingEmail = await prisma.user.findUnique({ where: { email } });\r\n    if (existingEmail && existingEmail.id !== id) {\r\n      return NextResponse.json({ error: 'El correo ya está registrado.', field: 'email' }, { status: 400 });\r\n    }\r\n    if (!/^\\d{5,}$/.test(documentNumber)) {\r\n      return NextResponse.json({ error: 'El número de documento debe ser numérico y mínimo 5 dígitos.', field: 'documentNumber' }, { status: 400 });\r\n    }\r\n    const existingDoc = await prisma.user.findUnique({ where: { documentNumber } });\r\n    if (existingDoc && existingDoc.id !== id) {\r\n      return NextResponse.json({ error: 'El número de documento ya está registrado.', field: 'documentNumber' }, { status: 400 });\r\n    }\r\n    if (!/^[A-Za-zÁÉÍÓÚáéíóúÑñ ]{3,}$/.test(name.trim())) {\r\n      return NextResponse.json({ error: 'El nombre debe tener solo letras y al menos 3 caracteres.', field: 'name' }, { status: 400 });\r\n    }\r\n    if (!birthDate || typeof birthDate !== 'string') {\r\n      return NextResponse.json({ error: 'La fecha de nacimiento es obligatoria.', field: 'birthDate' }, { status: 400 });\r\n    }\r\n    const birth = new Date(birthDate);\r\n    const now = new Date();\r\n    if (birth > now) {\r\n      return NextResponse.json({ error: 'La fecha de nacimiento no puede ser futura.', field: 'birthDate' }, { status: 400 });\r\n    }\r\n    const age = now.getFullYear() - birth.getFullYear() - (now < new Date(now.getFullYear(), birth.getMonth(), birth.getDate()) ? 1 : 0);\r\n    if (age < 5) {\r\n      return NextResponse.json({ error: 'La edad mínima es 5 años.', field: 'birthDate' }, { status: 400 });\r\n    }\r\n    if (!phone || typeof phone !== 'string' || !/^\\d{7,10}$/.test(phone) || phone.startsWith('0')) {\r\n      return NextResponse.json({ error: 'El teléfono debe tener entre 7 y 10 dígitos, no empezar por 0.', field: 'phone' }, { status: 400 });\r\n    }\r\n    if (!address || typeof address !== 'string' || address.trim().length < 5) {\r\n      return NextResponse.json({ error: 'La dirección debe tener al menos 5 caracteres.', field: 'address' }, { status: 400 });\r\n    }\r\n    if (!['M', 'F', 'O'].includes(gender)) {\r\n      return NextResponse.json({ error: 'El género debe ser M, F u O.', field: 'gender' }, { status: 400 });\r\n    }\r\n    if (photoUrl && (typeof photoUrl !== 'string' || !/^https?:\\/\\/.+\\.(jpg|jpeg|png|gif|webp)$/i.test(photoUrl))) {\r\n      return NextResponse.json({ error: 'La foto debe ser una URL de imagen válida.', field: 'photoUrl' }, { status: 400 });\r\n    }\r\n    // Actualizar docente en la base de datos (siempre rol DOCENTE)\r\n    const docente = await prisma.user.update({\r\n      where: { id },\r\n      data: {\r\n        name,\r\n        email,\r\n        role: 'DOCENTE',\r\n        documentType: documentType || null,\r\n        documentNumber: documentNumber || null,\r\n        birthDate: birthDate ? new Date(birthDate) : null,\r\n        phone: phone || null,\r\n        address: address || null,\r\n        gender: gender || null,\r\n        photoUrl: photoUrl || null\r\n      },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        role: true,\r\n        documentType: true,\r\n        documentNumber: true,\r\n        birthDate: true,\r\n        phone: true,\r\n        address: true,\r\n        gender: true,\r\n        photoUrl: true\r\n      }\r\n    });\r\n    return NextResponse.json(docente);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al editar docente', details: (error && typeof error === 'object' && 'message' in error) ? (error as any).message : String(error) }, { status: 500 });\r\n  }\r\n}\r\n\r\n// DELETE: Eliminar docente\r\nexport async function DELETE(request: Request) {\r\n  try {\r\n    const body = await request.json();\r\n    const { id } = body;\r\n    if (!id) {\r\n      return NextResponse.json({ error: 'Falta el id' }, { status: 400 });\r\n    }\r\n    await prisma.user.delete({ where: { id } });\r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al eliminar docente' }, { status: 500 });\r\n  }\r\n}\r\nimport { NextResponse } from 'next/server';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport { initFirebaseAdmin } from '@/lib/firebaseAdmin';\r\nimport { getAuth } from 'firebase-admin/auth';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// GET: Lista todos los docentes (básico, para admin)\r\nexport async function GET() {\r\n  try {\r\n    const docentes = await prisma.user.findMany({\r\n      where: { role: 'DOCENTE' },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        documentType: true,\r\n        documentNumber: true,\r\n        birthDate: true,\r\n        phone: true,\r\n        address: true,\r\n        gender: true,\r\n        photoUrl: true,\r\n        role: true,\r\n      },\r\n      orderBy: { id: 'asc' },\r\n    });\r\n    return NextResponse.json(docentes);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al obtener docentes' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST: Registrar docente (igual que usuarios, pero forzando rol DOCENTE)\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const body = await request.json();\r\n    const {\r\n      name, email, documentType, documentNumber, birthDate, phone, address, gender, photoUrl\r\n    } = body || {};\r\n\r\n    // Validar campos obligatorios y tipos\r\n    if (!name || typeof name !== 'string') {\r\n      return NextResponse.json({ error: 'El nombre es obligatorio.', field: 'name' }, { status: 400 });\r\n    }\r\n    if (!email || typeof email !== 'string') {\r\n      return NextResponse.json({ error: 'El correo es obligatorio.', field: 'email' }, { status: 400 });\r\n    }\r\n    if (!documentNumber || typeof documentNumber !== 'string') {\r\n      return NextResponse.json({ error: 'El número de documento es obligatorio.', field: 'documentNumber' }, { status: 400 });\r\n    }\r\n\r\n    // Validaciones robustas de datos personales en backend\r\n    const emailRegex = /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/;\r\n    if (!emailRegex.test(email)) {\r\n      return NextResponse.json({ error: 'Correo electrónico inválido.', field: 'email' }, { status: 400 });\r\n    }\r\n    const existingEmail = await prisma.user.findUnique({ where: { email } });\r\n    if (existingEmail) {\r\n      return NextResponse.json({ error: 'El correo ya está registrado.', field: 'email' }, { status: 400 });\r\n    }\r\n    if (!/^\\d{5,}$/.test(documentNumber)) {\r\n      return NextResponse.json({ error: 'El número de documento debe ser numérico y mínimo 5 dígitos.', field: 'documentNumber' }, { status: 400 });\r\n    }\r\n    const existingDoc = await prisma.user.findUnique({ where: { documentNumber } });\r\n    if (existingDoc) {\r\n      return NextResponse.json({ error: 'El número de documento ya está registrado.', field: 'documentNumber' }, { status: 400 });\r\n    }\r\n    if (!/^[A-Za-zÁÉÍÓÚáéíóúÑñ ]{3,}$/.test(name.trim())) {\r\n      return NextResponse.json({ error: 'El nombre debe tener solo letras y al menos 3 caracteres.', field: 'name' }, { status: 400 });\r\n    }\r\n    if (!birthDate || typeof birthDate !== 'string') {\r\n      return NextResponse.json({ error: 'La fecha de nacimiento es obligatoria.', field: 'birthDate' }, { status: 400 });\r\n    }\r\n    const birth = new Date(birthDate);\r\n    const now = new Date();\r\n    if (birth > now) {\r\n      return NextResponse.json({ error: 'La fecha de nacimiento no puede ser futura.', field: 'birthDate' }, { status: 400 });\r\n    }\r\n    const age = now.getFullYear() - birth.getFullYear() - (now < new Date(now.getFullYear(), birth.getMonth(), birth.getDate()) ? 1 : 0);\r\n    if (age < 5) {\r\n      return NextResponse.json({ error: 'La edad mínima es 5 años.', field: 'birthDate' }, { status: 400 });\r\n    }\r\n    if (!phone || typeof phone !== 'string' || !/^\\d{7,10}$/.test(phone) || phone.startsWith('0')) {\r\n      return NextResponse.json({ error: 'El teléfono debe tener entre 7 y 10 dígitos, no empezar por 0.', field: 'phone' }, { status: 400 });\r\n    }\r\n    if (!address || typeof address !== 'string' || address.trim().length < 5) {\r\n      return NextResponse.json({ error: 'La dirección debe tener al menos 5 caracteres.', field: 'address' }, { status: 400 });\r\n    }\r\n    if (!['M', 'F', 'O'].includes(gender)) {\r\n      return NextResponse.json({ error: 'El género debe ser M, F u O.', field: 'gender' }, { status: 400 });\r\n    }\r\n    if (photoUrl && (typeof photoUrl !== 'string' || !/^https?:\\/\\/.+\\.(jpg|jpeg|png|gif|webp)$/i.test(photoUrl))) {\r\n      return NextResponse.json({ error: 'La foto debe ser una URL de imagen válida.', field: 'photoUrl' }, { status: 400 });\r\n    }\r\n\r\n    // Inicializar Firebase Admin\r\n    initFirebaseAdmin();\r\n    const auth = getAuth();\r\n\r\n    // Verificar si el usuario ya existe en Firebase Auth\r\n    try {\r\n      await auth.getUserByEmail(email);\r\n      return NextResponse.json({ error: 'El correo ya está registrado.', field: 'email' }, { status: 400 });\r\n    } catch (e) {\r\n      // Si no existe, se crea\r\n    }\r\n\r\n    // Crear usuario en Firebase Auth con la contraseña igual al número de documento\r\n    const createdUser = await auth.createUser({\r\n      email,\r\n      password: documentNumber,\r\n      displayName: name,\r\n      photoURL: photoUrl || undefined,\r\n      emailVerified: false\r\n    });\r\n\r\n    // Guardar usuario en la base de datos\r\n    const docente = await prisma.user.create({\r\n      data: {\r\n        name,\r\n        email,\r\n        role: 'DOCENTE',\r\n        firebaseUid: createdUser.uid,\r\n        passwordHash: '',\r\n        documentType: documentType || null,\r\n        documentNumber: documentNumber || null,\r\n        birthDate: birthDate ? new Date(birthDate) : null,\r\n        phone: phone || null,\r\n        address: address || null,\r\n        gender: gender || null,\r\n        photoUrl: photoUrl || null\r\n      },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        role: true,\r\n        firebaseUid: true,\r\n        documentType: true,\r\n        documentNumber: true,\r\n        birthDate: true,\r\n        phone: true,\r\n        address: true,\r\n        gender: true,\r\n        photoUrl: true\r\n      }\r\n    });\r\n    return NextResponse.json(docente);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al registrar docente', details: (error && typeof error === 'object' && 'message' in error) ? (error as any).message : String(error) }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}