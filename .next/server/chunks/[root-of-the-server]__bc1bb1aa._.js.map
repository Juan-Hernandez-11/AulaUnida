{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/app/api/admin/asignaturas/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// GET: Devuelve todas las asignaturas (id, nombre, gradoId)\r\nexport async function GET() {\r\n  try {\r\n    const materias = await prisma.materia.findMany({\r\n      select: {\r\n        id: true,\r\n        nombre: true,\r\n        area: true,\r\n        codigo: true,\r\n        materiaGrados: {\r\n          select: {\r\n            id: true,\r\n            grado: { select: { id: true, nombre: true, seccion: true } },\r\n            materiaGradoDocentes: {\r\n              select: {\r\n                id: true,\r\n                docente: { select: { id: true, name: true } },\r\n                periodo: { select: { id: true, nombre: true } }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      orderBy: { nombre: 'asc' },\r\n    });\r\n    // Formatear para frontend: grados y docentes por grado\r\n    const result = materias.map((m: any) => ({\r\n      id: m.id,\r\n      nombre: m.nombre,\r\n      area: m.area,\r\n      codigo: m.codigo,\r\n      grados: m.materiaGrados.map((mg: any) => ({\r\n        id: mg.grado.id,\r\n        nombre: mg.grado.nombre,\r\n        seccion: mg.grado.seccion,\r\n        docentes: mg.materiaGradoDocentes.map((mgd: any) => ({\r\n          id: mgd.docente.id,\r\n          name: mgd.docente.name,\r\n          periodo: mgd.periodo ? { id: mgd.periodo.id, nombre: mgd.periodo.nombre } : null\r\n        }))\r\n      }))\r\n    }));\r\n    return NextResponse.json(result);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al obtener asignaturas' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST: Crea una asignatura. Body: { nombre, gradoId }\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const { nombre, area, codigo, gradoIds, asignaciones } = await request.json();\r\n    if (!nombre || !area || !codigo || !Array.isArray(gradoIds) || gradoIds.length === 0) {\r\n      return NextResponse.json({ error: 'Faltan campos obligatorios' }, { status: 400 });\r\n    }\r\n    // Crear materia y grados\r\n    const materia = await prisma.materia.create({\r\n      data: {\r\n        nombre,\r\n        area,\r\n        codigo,\r\n        materiaGrados: {\r\n          create: gradoIds.map((gradoId: number) => ({ grado: { connect: { id: gradoId } } }))\r\n        }\r\n      },\r\n      include: {\r\n        materiaGrados: { select: { id: true, grado: { select: { id: true, nombre: true, seccion: true } }, materiaGradoDocentes: true } }\r\n      }\r\n    });\r\n    // Asignar docentes por grado y periodo\r\n    if (Array.isArray(asignaciones)) {\r\n      for (const asig of asignaciones) {\r\n        // Buscar el id de MateriaGrado para el grado\r\n        const mg = materia.materiaGrados.find(mg => mg.grado.id === asig.gradoId);\r\n        if (mg) {\r\n          await prisma.materiaGradoDocente.create({\r\n            data: {\r\n              materiaGradoId: mg.id,\r\n              docenteId: asig.docenteId,\r\n              periodoId: asig.periodoId || null\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n    // Obtener materia con grados y docentes\r\n    const materiaFull = await prisma.materia.findUnique({\r\n      where: { id: materia.id },\r\n      select: {\r\n        id: true,\r\n        nombre: true,\r\n        area: true,\r\n        codigo: true,\r\n        materiaGrados: {\r\n          select: {\r\n            id: true,\r\n            grado: { select: { id: true, nombre: true, seccion: true } },\r\n            materiaGradoDocentes: {\r\n              select: {\r\n                docente: { select: { id: true, name: true } },\r\n                periodo: { select: { id: true, nombre: true } }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    return NextResponse.json(materiaFull);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al crear asignatura' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// PUT: Edita una asignatura. Body: { id, nombre, gradoId }\r\nexport async function PUT(request: Request) {\r\n  try {\r\n    const { id, nombre, area, codigo, gradoIds, asignaciones } = await request.json();\r\n    if (!id || !nombre || !area || !codigo || !Array.isArray(gradoIds) || gradoIds.length === 0) {\r\n      return NextResponse.json({ error: 'Faltan campos obligatorios' }, { status: 400 });\r\n    }\r\n    // Actualizar materia\r\n    const materia = await prisma.materia.update({\r\n      where: { id: Number(id) },\r\n      data: { nombre, area, codigo },\r\n    });\r\n    // Actualizar grados asociados (MateriaGrado)\r\n    await prisma.materiaGrado.deleteMany({ where: { materiaId: materia.id } });\r\n    const nuevosMG = await Promise.all(gradoIds.map(async (gradoId: number) => {\r\n      return await prisma.materiaGrado.create({ data: { materiaId: materia.id, gradoId } });\r\n    }));\r\n    // Limpiar asignaciones previas de docentes\r\n    for (const mg of nuevosMG) {\r\n  await prisma.materiaGradoDocente.deleteMany({ where: { materiaGradoId: mg.id } });\r\n    }\r\n    // Asignar docentes por grado y periodo\r\n    if (Array.isArray(asignaciones)) {\r\n      for (const asig of asignaciones) {\r\n        const mg = nuevosMG.find(mg => mg.gradoId === asig.gradoId);\r\n        if (mg) {\r\n          await prisma.materiaGradoDocente.create({\r\n            data: {\r\n              materiaGradoId: mg.id,\r\n              docenteId: asig.docenteId,\r\n              periodoId: asig.periodoId || null\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n    // Obtener materia actualizada con grados y docentes\r\n    const materiaFull = await prisma.materia.findUnique({\r\n      where: { id: materia.id },\r\n      select: {\r\n        id: true,\r\n        nombre: true,\r\n        area: true,\r\n        codigo: true,\r\n        materiaGrados: {\r\n          select: {\r\n            id: true,\r\n            grado: { select: { id: true, nombre: true, seccion: true } },\r\n            materiaGradoDocentes: {\r\n              select: {\r\n                docente: { select: { id: true, name: true } },\r\n                periodo: { select: { id: true, nombre: true } }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    return NextResponse.json(materiaFull);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al editar asignatura' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// DELETE: Elimina una asignatura. Body: { id }\r\nexport async function DELETE(request: Request) {\r\n  try {\r\n    const { id } = await request.json();\r\n    if (!id) {\r\n      return NextResponse.json({ error: 'Falta el id' }, { status: 400 });\r\n    }\r\n    await prisma.materiaGrado.deleteMany({ where: { materiaId: Number(id) } });\r\n    await prisma.materiaDocente.deleteMany({ where: { materiaId: Number(id) } });\r\n    await prisma.materia.delete({ where: { id: Number(id) } });\r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al eliminar asignatura' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}