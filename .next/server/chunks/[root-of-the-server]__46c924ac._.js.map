{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ||\r\n  new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM;AAEC,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6IAAY;AAElB,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/lib/firebaseAdmin.ts"],"sourcesContent":["import { initializeApp, getApps, cert } from 'firebase-admin/app';\r\n\r\nexport function initFirebaseAdmin() {\r\n  if (!getApps().length) {\r\n    initializeApp({\r\n      credential: cert({\r\n        projectId: process.env.FIREBASE_PROJECT_ID,\r\n        clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\r\n        privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\\\n/g, '\\n'),\r\n      }),\r\n    });\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;;;;;;AAEO,SAAS;IACd,IAAI,CAAC,IAAA,2JAAO,IAAG,MAAM,EAAE;QACrB,IAAA,iKAAa,EAAC;YACZ,YAAY,IAAA,wJAAI,EAAC;gBACf,WAAW,QAAQ,GAAG,CAAC,mBAAmB;gBAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;gBAC9C,YAAY,QAAQ,GAAG,CAAC,oBAAoB,EAAE,QAAQ,QAAQ;YAChE;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/lib/requireAdmin.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { getAuth } from 'firebase-admin/auth';\r\nimport { initFirebaseAdmin } from './firebaseAdmin';\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\ninitFirebaseAdmin();\r\nconst prisma = new PrismaClient();\r\n\r\n/**\r\n * Verifica el token de Firebase y que el usuario tenga rol 'admin'.\r\n * Si no es válido, retorna una respuesta 401/403. Si es válido, retorna el usuario.\r\n */\r\nexport async function requireAdmin(request: Request) {\r\n  try {\r\n    const authHeader = request.headers.get('authorization');\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n      return NextResponse.json({ error: 'No autorizado (token faltante)' }, { status: 401 });\r\n    }\r\n    const idToken = authHeader.replace('Bearer ', '');\r\n    const decoded = await getAuth().verifyIdToken(idToken);\r\n    // Busca el usuario en la base de datos y verifica el rol\r\n    const user = await prisma.user.findUnique({\r\n      where: { firebaseUid: decoded.uid },\r\n      select: { id: true, email: true, role: true },\r\n    });\r\n    if (!user || user.role !== 'ADMIN') {\r\n      return NextResponse.json({ error: 'No autorizado (solo admin)' }, { status: 403 });\r\n    }\r\n    return user;\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'No autorizado (token inválido)' }, { status: 401 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;;;;;;AAEA,IAAA,kJAAiB;AACjB,MAAM,SAAS,IAAI,6IAAY;AAMxB,eAAe,aAAa,OAAgB;IACjD,IAAI;QACF,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;QACvC,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CAAC,YAAY;YACpD,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiC,GAAG;gBAAE,QAAQ;YAAI;QACtF;QACA,MAAM,UAAU,WAAW,OAAO,CAAC,WAAW;QAC9C,MAAM,UAAU,MAAM,IAAA,6JAAO,IAAG,aAAa,CAAC;QAC9C,yDAAyD;QACzD,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE,aAAa,QAAQ,GAAG;YAAC;YAClC,QAAQ;gBAAE,IAAI;gBAAM,OAAO;gBAAM,MAAM;YAAK;QAC9C;QACA,IAAI,CAAC,QAAQ,KAAK,IAAI,KAAK,SAAS;YAClC,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA6B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiC,GAAG;YAAE,QAAQ;QAAI;IACtF;AACF","debugId":null}},
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/app/api/admin/materias/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/prisma';\r\nimport { requireAdmin } from '@/lib/requireAdmin';\r\n\r\n// GET: Listar materias (con grados asociados)\r\nexport async function GET(request: Request) {\r\n  const url = new URL(request.url);\r\n  const gradoId = url.searchParams.get('gradoId');\r\n  let materias;\r\n  if (gradoId) {\r\n    materias = await prisma.materia.findMany({\r\n      where: {\r\n        materiaGrados: {\r\n          some: { gradoId: Number(gradoId) }\r\n        }\r\n      },\r\n      include: {\r\n        materiaGrados: { include: { grado: true } }\r\n      },\r\n      orderBy: { nombre: 'asc' },\r\n    });\r\n  } else {\r\n    materias = await prisma.materia.findMany({\r\n      include: {\r\n        materiaGrados: { include: { grado: true } }\r\n      },\r\n      orderBy: { nombre: 'asc' },\r\n    });\r\n  }\r\n  return NextResponse.json(materias);\r\n}\r\n\r\n// POST: Crear materia y vincular grados\r\nexport async function POST(request: Request) {\r\n  const admin = await requireAdmin(request);\r\n  if ('error' in admin) return admin;\r\n  const data = await request.json();\r\n  const { nombre, area, codigo, gradoIds } = data || {};\r\n  if (\r\n    typeof nombre !== 'string' || !nombre.trim() ||\r\n    typeof area !== 'string' || !area.trim() ||\r\n    typeof codigo !== 'string' || !codigo.trim() ||\r\n    !Array.isArray(gradoIds) || gradoIds.length === 0 || gradoIds.some(id => typeof id !== 'number' || isNaN(id))\r\n  ) {\r\n    return NextResponse.json({ error: 'Faltan campos obligatorios o tipos incorrectos' }, { status: 400 });\r\n  }\r\n  // Validar existencia de grados\r\n  const grados = await prisma.grado.findMany({ where: { id: { in: gradoIds } } });\r\n  if (grados.length !== gradoIds.length) {\r\n    return NextResponse.json({ error: 'Uno o más grados no existen' }, { status: 400 });\r\n  }\r\n  // Validar unicidad de código\r\n  const existe = await prisma.materia.findFirst({ where: { codigo: codigo.trim() } });\r\n  if (existe) {\r\n    return NextResponse.json({ error: 'Ya existe una materia con ese código.' }, { status: 409 });\r\n  }\r\n  try {\r\n    const materia = await prisma.materia.create({\r\n      data: {\r\n        nombre: nombre.trim(),\r\n        area: area.trim(),\r\n        codigo: codigo.trim(),\r\n        materiaGrados: {\r\n          create: gradoIds.map(gradoId => ({ grado: { connect: { id: gradoId } } }))\r\n        }\r\n      },\r\n      include: { materiaGrados: { include: { grado: true } } }\r\n    });\r\n    return NextResponse.json(materia);\r\n  } catch (e: any) {\r\n    if (e.code && e.code.startsWith('P')) {\r\n      return NextResponse.json({ error: 'Error de base de datos: ' + e.message }, { status: 500 });\r\n    }\r\n    return NextResponse.json({ error: e.message }, { status: 400 });\r\n  }\r\n}\r\n\r\n// PUT: Editar materia y sus grados\r\nexport async function PUT(request: Request) {\r\n  const admin = await requireAdmin(request);\r\n  if ('error' in admin) return admin;\r\n  const data = await request.json();\r\n  const { id, nombre, area, codigo, gradoIds } = data || {};\r\n  if (\r\n    typeof id !== 'number' || isNaN(id) ||\r\n    typeof nombre !== 'string' || !nombre.trim() ||\r\n    typeof area !== 'string' || !area.trim() ||\r\n    typeof codigo !== 'string' || !codigo.trim() ||\r\n    !Array.isArray(gradoIds) || gradoIds.length === 0 || gradoIds.some(id => typeof id !== 'number' || isNaN(id))\r\n  ) {\r\n    return NextResponse.json({ error: 'Faltan campos obligatorios o tipos incorrectos' }, { status: 400 });\r\n  }\r\n  // Validar existencia de grados\r\n  const grados = await prisma.grado.findMany({ where: { id: { in: gradoIds } } });\r\n  if (grados.length !== gradoIds.length) {\r\n    return NextResponse.json({ error: 'Uno o más grados no existen' }, { status: 400 });\r\n  }\r\n  // Validar unicidad de código (excluyendo la propia materia)\r\n  const existe = await prisma.materia.findFirst({ where: { codigo: codigo.trim(), NOT: { id } } });\r\n  if (existe) {\r\n    return NextResponse.json({ error: 'Ya existe una materia con ese código.' }, { status: 409 });\r\n  }\r\n  try {\r\n    // Actualiza materia\r\n    const materia = await prisma.materia.update({\r\n      where: { id },\r\n      data: {\r\n        nombre: nombre.trim(),\r\n        area: area.trim(),\r\n        codigo: codigo.trim(),\r\n      },\r\n    });\r\n    // Sincroniza grados\r\n    await prisma.materiaGrado.deleteMany({ where: { materiaId: id } });\r\n    await prisma.materiaGrado.createMany({\r\n      data: gradoIds.map(gradoId => ({ materiaId: id, gradoId })),\r\n      skipDuplicates: true\r\n    });\r\n    const materiaActualizada = await prisma.materia.findUnique({\r\n      where: { id },\r\n      include: { materiaGrados: { include: { grado: true } } }\r\n    });\r\n    return NextResponse.json(materiaActualizada);\r\n  } catch (e: any) {\r\n    if (e.code && e.code.startsWith('P')) {\r\n      return NextResponse.json({ error: 'Error de base de datos: ' + e.message }, { status: 500 });\r\n    }\r\n    return NextResponse.json({ error: e.message }, { status: 400 });\r\n  }\r\n}\r\n\r\n// DELETE: Eliminar materia y sus relaciones\r\nexport async function DELETE(request: Request) {\r\n  const admin = await requireAdmin(request);\r\n  if ('error' in admin) return admin;\r\n  const data = await request.json();\r\n  const { id } = data || {};\r\n  if (typeof id !== 'number' || isNaN(id)) {\r\n    return NextResponse.json({ error: 'ID requerido o inválido' }, { status: 400 });\r\n  }\r\n  try {\r\n    await prisma.materiaGrado.deleteMany({ where: { materiaId: id } });\r\n    await prisma.materia.delete({ where: { id } });\r\n    return NextResponse.json({ ok: true });\r\n  } catch (e: any) {\r\n    if (e.code && e.code.startsWith('P')) {\r\n      return NextResponse.json({ error: 'Error de base de datos: ' + e.message }, { status: 500 });\r\n    }\r\n    return NextResponse.json({ error: e.message }, { status: 400 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}