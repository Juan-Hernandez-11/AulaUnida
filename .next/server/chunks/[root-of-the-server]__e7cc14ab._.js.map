{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/app/api/admin/aulas/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { PrismaClient, Prisma } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// GET: Devuelve todas las aulas (id, codigo, nombre, sedeId, sede.nombre)\r\nexport async function GET() {\r\n  try {\r\n    const aulas = await prisma.aula.findMany({\r\n      select: { id: true, codigo: true, nombre: true, sedeId: true, sede: { select: { nombre: true } } },\r\n      orderBy: { nombre: 'asc' },\r\n    });\r\n    return NextResponse.json(aulas);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al obtener aulas' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST: Crea un aula. Body: { codigo, nombre, sedeId }\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const { codigo, nombre, sedeId } = await request.json();\r\n    if (\r\n      typeof codigo !== 'string' || !codigo.trim() ||\r\n      typeof nombre !== 'string' || !nombre.trim() ||\r\n      (!sedeId && sedeId !== 0)\r\n    ) {\r\n      return NextResponse.json({ error: 'Faltan campos obligatorios o tipos incorrectos' }, { status: 400 });\r\n    }\r\n    // Verificar existencia de sede\r\n    const sede = await prisma.sede.findUnique({ where: { id: Number(sedeId) } });\r\n    if (!sede) {\r\n      return NextResponse.json({ error: 'La sede especificada no existe' }, { status: 400 });\r\n    }\r\n    // Validar unicidad de c贸digo+sede\r\n    const existe = await prisma.aula.findFirst({ where: { codigo: codigo.trim(), sedeId: Number(sedeId) } });\r\n    if (existe) {\r\n      return NextResponse.json({ error: 'Ya existe un aula con ese c贸digo en la sede seleccionada' }, { status: 409 });\r\n    }\r\n    const aula = await prisma.aula.create({\r\n      data: { codigo: codigo.trim(), nombre: nombre.trim(), sedeId: Number(sedeId) },\r\n      select: { id: true, codigo: true, nombre: true, sedeId: true, sede: { select: { nombre: true } } },\r\n    });\r\n    return NextResponse.json(aula);\r\n  } catch (error: any) {\r\n    if (error instanceof Prisma.PrismaClientKnownRequestError) {\r\n      return NextResponse.json({ error: 'Error de base de datos: ' + error.message }, { status: 500 });\r\n    }\r\n    return NextResponse.json({ error: 'Error al crear aula' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// PUT: Edita un aula. Body: { id, codigo, nombre, sedeId }\r\nexport async function PUT(request: Request) {\r\n  try {\r\n    const { id, codigo, nombre, sedeId } = await request.json();\r\n    if (\r\n      (!id && id !== 0) || typeof codigo !== 'string' || !codigo.trim() ||\r\n      typeof nombre !== 'string' || !nombre.trim() ||\r\n      (!sedeId && sedeId !== 0)\r\n    ) {\r\n      return NextResponse.json({ error: 'Faltan campos obligatorios o tipos incorrectos' }, { status: 400 });\r\n    }\r\n    // Verificar existencia de sede\r\n    const sede = await prisma.sede.findUnique({ where: { id: Number(sedeId) } });\r\n    if (!sede) {\r\n      return NextResponse.json({ error: 'La sede especificada no existe' }, { status: 400 });\r\n    }\r\n    // Validar unicidad de c贸digo+sede (excluyendo el propio aula)\r\n    const existe = await prisma.aula.findFirst({\r\n      where: {\r\n        codigo: codigo.trim(),\r\n        sedeId: Number(sedeId),\r\n        NOT: { id: Number(id) },\r\n      },\r\n    });\r\n    if (existe) {\r\n      return NextResponse.json({ error: 'Ya existe un aula con ese c贸digo en la sede seleccionada' }, { status: 409 });\r\n    }\r\n    const aula = await prisma.aula.update({\r\n      where: { id: Number(id) },\r\n      data: { codigo: codigo.trim(), nombre: nombre.trim(), sedeId: Number(sedeId) },\r\n      select: { id: true, codigo: true, nombre: true, sedeId: true, sede: { select: { nombre: true } } },\r\n    });\r\n    return NextResponse.json(aula);\r\n  } catch (error: any) {\r\n    if (error instanceof Prisma.PrismaClientKnownRequestError) {\r\n      return NextResponse.json({ error: 'Error de base de datos: ' + error.message }, { status: 500 });\r\n    }\r\n    return NextResponse.json({ error: 'Error al editar aula' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// DELETE: Elimina un aula. Body: { id }\r\nexport async function DELETE(request: Request) {\r\n  try {\r\n    const { id } = await request.json();\r\n    if (!id && id !== 0) {\r\n      return NextResponse.json({ error: 'Falta el id' }, { status: 400 });\r\n    }\r\n    await prisma.aula.delete({ where: { id: Number(id) } });\r\n    return NextResponse.json({ success: true });\r\n  } catch (error: any) {\r\n    if (error instanceof Prisma.PrismaClientKnownRequestError) {\r\n      if (error.code === 'P2025') {\r\n        return NextResponse.json({ error: 'El aula no existe o ya fue eliminada' }, { status: 404 });\r\n      }\r\n      return NextResponse.json({ error: 'Error de base de datos: ' + error.message }, { status: 500 });\r\n    }\r\n    return NextResponse.json({ error: 'Error al eliminar aula' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}