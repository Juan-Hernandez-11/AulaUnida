{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/app/api/admin/periodos/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// GET: Lista todos los periodos, o los de un ciclo si se pasa cicloId\r\nexport async function GET(request: Request) {\r\n  try {\r\n    const url = new URL(request.url);\r\n    const cicloId = url.searchParams.get('cicloId');\r\n    let periodos;\r\n    if (cicloId) {\r\n      periodos = await prisma.periodo.findMany({\r\n        where: { cicloId: Number(cicloId) },\r\n        select: { id: true, nombre: true, fechaInicio: true, fechaFin: true, cicloId: true },\r\n        orderBy: { fechaInicio: 'asc' },\r\n      });\r\n    } else {\r\n      periodos = await prisma.periodo.findMany({\r\n        select: { id: true, nombre: true, fechaInicio: true, fechaFin: true, cicloId: true },\r\n        orderBy: { fechaInicio: 'asc' },\r\n      });\r\n    }\r\n    return NextResponse.json(periodos);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al obtener periodos' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST: Crea un nuevo periodo\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const { nombre, fechaInicio, fechaFin, cicloId } = await request.json();\r\n    const nuevoPeriodo = await prisma.periodo.create({\r\n      data: {\r\n        nombre,\r\n        fechaInicio: new Date(fechaInicio),\r\n        fechaFin: new Date(fechaFin),\r\n        cicloId,\r\n      },\r\n    });\r\n    return NextResponse.json(nuevoPeriodo, { status: 201 });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al crear periodo' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6IAAY;AAGxB,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;QAC/B,MAAM,UAAU,IAAI,YAAY,CAAC,GAAG,CAAC;QACrC,IAAI;QACJ,IAAI,SAAS;YACX,WAAW,MAAM,OAAO,OAAO,CAAC,QAAQ,CAAC;gBACvC,OAAO;oBAAE,SAAS,OAAO;gBAAS;gBAClC,QAAQ;oBAAE,IAAI;oBAAM,QAAQ;oBAAM,aAAa;oBAAM,UAAU;oBAAM,SAAS;gBAAK;gBACnF,SAAS;oBAAE,aAAa;gBAAM;YAChC;QACF,OAAO;YACL,WAAW,MAAM,OAAO,OAAO,CAAC,QAAQ,CAAC;gBACvC,QAAQ;oBAAE,IAAI;oBAAM,QAAQ;oBAAM,aAAa;oBAAM,UAAU;oBAAM,SAAS;gBAAK;gBACnF,SAAS;oBAAE,aAAa;gBAAM;YAChC;QACF;QACA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACjF;AACF;AAGO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,MAAM,QAAQ,IAAI;QACrE,MAAM,eAAe,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;YAC/C,MAAM;gBACJ;gBACA,aAAa,IAAI,KAAK;gBACtB,UAAU,IAAI,KAAK;gBACnB;YACF;QACF;QACA,OAAO,gJAAY,CAAC,IAAI,CAAC,cAAc;YAAE,QAAQ;QAAI;IACvD,EAAE,OAAO,OAAO;QACd,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAC9E;AACF","debugId":null}}]
}