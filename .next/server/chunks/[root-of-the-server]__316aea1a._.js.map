{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/lib/firebaseAdmin.ts"],"sourcesContent":["import { initializeApp, getApps, cert } from 'firebase-admin/app';\r\n\r\nexport function initFirebaseAdmin() {\r\n  if (!getApps().length) {\r\n    initializeApp({\r\n      credential: cert({\r\n        projectId: process.env.FIREBASE_PROJECT_ID,\r\n        clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\r\n        privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\\\n/g, '\\n'),\r\n      }),\r\n    });\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;;;;;;AAEO,SAAS;IACd,IAAI,CAAC,IAAA,2JAAO,IAAG,MAAM,EAAE;QACrB,IAAA,iKAAa,EAAC;YACZ,YAAY,IAAA,wJAAI,EAAC;gBACf,WAAW,QAAQ,GAAG,CAAC,mBAAmB;gBAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;gBAC9C,YAAY,QAAQ,GAAG,CAAC,oBAAoB,EAAE,QAAQ,QAAQ;YAChE;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ||\r\n  new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM;AAEC,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6IAAY;AAElB,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/app/api/estudiante/boletin/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { getAuth } from 'firebase-admin/auth';\r\nimport { initFirebaseAdmin } from '@/lib/firebaseAdmin';\r\nimport { prisma } from '@/lib/prisma';\r\n\r\ninitFirebaseAdmin();\r\n\r\n// GET: Devuelve datos personales del estudiante y sus notas por periodo para generar el boletín\r\nexport async function GET(request: Request) {\r\n  try {\r\n    const authHeader = request.headers.get('authorization');\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n      return NextResponse.json({ error: 'No autorizado (token faltante)' }, { status: 401 });\r\n    }\r\n    const idToken = authHeader.replace('Bearer ', '');\r\n    const decoded = await getAuth().verifyIdToken(idToken);\r\n    const user = await prisma.user.findUnique({ where: { firebaseUid: decoded.uid } });\r\n    if (!user) return NextResponse.json({ error: 'Usuario no encontrado' }, { status: 404 });\r\n\r\n    const url = new URL(request.url);\r\n    const cicloIdParam = url.searchParams.get('cicloId');\r\n    if (!cicloIdParam) return NextResponse.json({ error: 'Falta cicloId' }, { status: 400 });\r\n    const cicloId = Number(cicloIdParam);\r\n\r\n    // Datos personales y grado\r\n    const estudiante = await prisma.user.findUnique({\r\n      where: { id: user.id },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        documentNumber: true,\r\n        estudianteGrados: {\r\n          where: { grado: { cicloId } },\r\n          select: {\r\n            grado: {\r\n              select: {\r\n                nombre: true,\r\n                seccion: true,\r\n                sede: { select: { nombre: true } },\r\n                ciclo: { select: { nombre: true } }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Materias y notas por periodo\r\n    const notas = await prisma.notaMateriaPeriodo.findMany({\r\n      where: { estudianteId: user.id, periodo: { cicloId } },\r\n      include: { materia: true, periodo: true }\r\n    });\r\n\r\n    return NextResponse.json({ estudiante, notas });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'No autorizado (token inválido)' }, { status: 401 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;;;;;;AAEA,IAAA,kJAAiB;AAGV,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;QACvC,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CAAC,YAAY;YACpD,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiC,GAAG;gBAAE,QAAQ;YAAI;QACtF;QACA,MAAM,UAAU,WAAW,OAAO,CAAC,WAAW;QAC9C,MAAM,UAAU,MAAM,IAAA,6JAAO,IAAG,aAAa,CAAC;QAC9C,MAAM,OAAO,MAAM,gIAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE,aAAa,QAAQ,GAAG;YAAC;QAAE;QAChF,IAAI,CAAC,MAAM,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;QAEtF,MAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;QAC/B,MAAM,eAAe,IAAI,YAAY,CAAC,GAAG,CAAC;QAC1C,IAAI,CAAC,cAAc,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgB,GAAG;YAAE,QAAQ;QAAI;QACtF,MAAM,UAAU,OAAO;QAEvB,2BAA2B;QAC3B,MAAM,aAAa,MAAM,gIAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAC9C,OAAO;gBAAE,IAAI,KAAK,EAAE;YAAC;YACrB,QAAQ;gBACN,IAAI;gBACJ,MAAM;gBACN,gBAAgB;gBAChB,kBAAkB;oBAChB,OAAO;wBAAE,OAAO;4BAAE;wBAAQ;oBAAE;oBAC5B,QAAQ;wBACN,OAAO;4BACL,QAAQ;gCACN,QAAQ;gCACR,SAAS;gCACT,MAAM;oCAAE,QAAQ;wCAAE,QAAQ;oCAAK;gCAAE;gCACjC,OAAO;oCAAE,QAAQ;wCAAE,QAAQ;oCAAK;gCAAE;4BACpC;wBACF;oBACF;gBACF;YACF;QACF;QAEA,+BAA+B;QAC/B,MAAM,QAAQ,MAAM,gIAAM,CAAC,kBAAkB,CAAC,QAAQ,CAAC;YACrD,OAAO;gBAAE,cAAc,KAAK,EAAE;gBAAE,SAAS;oBAAE;gBAAQ;YAAE;YACrD,SAAS;gBAAE,SAAS;gBAAM,SAAS;YAAK;QAC1C;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE;YAAY;QAAM;IAC/C,EAAE,OAAO,OAAO;QACd,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiC,GAAG;YAAE,QAAQ;QAAI;IACtF;AACF","debugId":null}}]
}