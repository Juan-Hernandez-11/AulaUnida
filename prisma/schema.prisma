generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int               @id @default(autoincrement())
  name                      String?
  email                     String            @unique
  firebaseUid               String            @unique
  passwordHash              String
  role                      Role              @default(STUDENT)
  sedeId                    Int?
  active                    Boolean           @default(true)
  documentType              String?
  documentNumber            String?           @unique
  birthDate                 DateTime?
  phone                     String?
  address                   String?
  gender                    String?
  photoUrl                  String?
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
  anuncios                  Anuncio[]
  asistencias               Asistencia[]
  boletines                 Boletin[]
  cambios                   Cambio[]
  tareasEntregadas          Entrega[]
  estudianteGrados          GradoEstudiante[]
  horarios                  Horario[]         @relation("HorarioDocente")
  incidenciasComoDocente    Incidencia[]      @relation("IncidenciasDocente")
  incidenciasComoEstudiante Incidencia[]      @relation("IncidenciasEstudiante")
  docenteMaterias           MateriaDocente[]
  materiaGradoDocentes      MateriaGradoDocente[]
  sede                      Sede?             @relation(fields: [sedeId], references: [id])
  notasMateriaPeriodo       NotaMateriaPeriodo[]
}

model Sede {
  id        Int     @id @default(autoincrement())
  nombre    String
  direccion String
  aulas     Aula[]
  grados    Grado[]
  usuarios  User[]
}

model Grado {
  id          Int               @id @default(autoincrement())
  nombre      String
  seccion     String
  sedeId      Int
  cicloId     Int
  aulaId      Int?
  createdAt   DateTime          @default(now())
  aula        Aula?             @relation(fields: [aulaId], references: [id])
  ciclo       Ciclo             @relation(fields: [cicloId], references: [id])
  sede        Sede              @relation(fields: [sedeId], references: [id])
  estudiantes GradoEstudiante[]
  horarios    Horario[]
  materias    MateriaGrado[]
}

model Ciclo {
  id          Int       @id @default(autoincrement())
  nombre      String
  fechaInicio DateTime
  fechaFin    DateTime
  cerrado     Boolean   @default(false)
  boletines   Boletin[]
  grados      Grado[]
  periodos    Periodo[]
  horarios    Horario[]
}

model Periodo {
  id          Int      @id @default(autoincrement())
  nombre      String
  cicloId     Int
  fechaInicio DateTime
  fechaFin    DateTime
  ciclo       Ciclo    @relation(fields: [cicloId], references: [id])
  calificaciones Calificacion[]
  notasMateriaPeriodo NotaMateriaPeriodo[]
  materiaGradoDocentes MateriaGradoDocente[]
}

model Aula {
  id       Int       @id @default(autoincrement())
  codigo   String    @unique
  nombre   String
  sedeId   Int
  sede     Sede      @relation(fields: [sedeId], references: [id])
  grados   Grado[]
  horarios Horario[]
}

model Materia {
  id              Int              @id @default(autoincrement())
  nombre          String
  area            String
  codigo          String           @unique
  createdAt       DateTime         @default(now())
  anuncios        Anuncio[]
  asistencias     Asistencia[]
  horarios        Horario[]
  incidencias     Incidencia[]
  docenteMaterias MateriaDocente[]
  tareas          Tarea[]
  notasMateriaPeriodo NotaMateriaPeriodo[]
  materiaGrados   MateriaGrado[]
}

model MateriaDocente {
  id        Int     @id @default(autoincrement())
  materiaId Int
  docenteId Int
  docente   User    @relation(fields: [docenteId], references: [id])
  materia   Materia @relation(fields: [materiaId], references: [id])

  @@unique([materiaId, docenteId])
}

model GradoEstudiante {
  id           Int   @id @default(autoincrement())
  gradoId      Int
  estudianteId Int
  estudiante   User  @relation(fields: [estudianteId], references: [id])
  grado        Grado @relation(fields: [gradoId], references: [id])

  @@unique([gradoId, estudianteId])
}

model Tarea {
  id           Int       @id @default(autoincrement())
  materiaId    Int
  titulo       String
  descripcion  String?
  fechaEntrega DateTime?
  createdAt    DateTime  @default(now())
  entregas     Entrega[]
  materia      Materia   @relation(fields: [materiaId], references: [id])
}

model Entrega {
  id           Int           @id @default(autoincrement())
  tareaId      Int
  estudianteId Int
  archivoUrl   String?
  texto        String?
  entregadaAt  DateTime      @default(now())
  estado       String        @default("entregada")
  calificacion Calificacion?
  estudiante   User          @relation(fields: [estudianteId], references: [id])
  tarea        Tarea         @relation(fields: [tareaId], references: [id])
}

model Calificacion {
  id                Int      @id @default(autoincrement())
  entregaId         Int      @unique
  valor             Float
  retroalimentacion String?
  calificadaAt      DateTime @default(now())
  periodoId         Int
  periodo           Periodo  @relation(fields: [periodoId], references: [id])
  entrega           Entrega  @relation(fields: [entregaId], references: [id])
}

model Asistencia {
  id           Int      @id @default(autoincrement())
  fecha        DateTime
  materiaId    Int
  estudianteId Int
  presente     Boolean
  estudiante   User     @relation(fields: [estudianteId], references: [id])
  materia      Materia  @relation(fields: [materiaId], references: [id])
}

model Boletin {
  id           Int    @id @default(autoincrement())
  estudianteId Int
  cicloId      Int
  archivoUrl   String
  ciclo        Ciclo  @relation(fields: [cicloId], references: [id])
  estudiante   User   @relation(fields: [estudianteId], references: [id])
}

model Incidencia {
  id           Int      @id @default(autoincrement())
  estudianteId Int
  materiaId    Int
  docenteId    Int
  tipo         String
  descripcion  String
  fecha        DateTime @default(now())
  evidenciaUrl String?
  docente      User     @relation("IncidenciasDocente", fields: [docenteId], references: [id])
  estudiante   User     @relation("IncidenciasEstudiante", fields: [estudianteId], references: [id])
  materia      Materia  @relation(fields: [materiaId], references: [id])
}

model Anuncio {
  id        Int      @id @default(autoincrement())
  materiaId Int?
  autorId   Int
  mensaje   String
  fecha     DateTime @default(now())
  tipo      String
  autor     User     @relation(fields: [autorId], references: [id])
  materia   Materia? @relation(fields: [materiaId], references: [id])
}

model Horario {
  id         Int     @id @default(autoincrement())
  gradoId    Int
  materiaId  Int
  docenteId  Int
  cicloId    Int
  dia        String
  horaInicio String
  horaFin    String
  aulaId     Int?
  aula       Aula?   @relation(fields: [aulaId], references: [id])
  docente    User    @relation("HorarioDocente", fields: [docenteId], references: [id])
  grado      Grado   @relation(fields: [gradoId], references: [id])
  materia    Materia @relation(fields: [materiaId], references: [id])
  ciclo      Ciclo   @relation(fields: [cicloId], references: [id])
}

model Cambio {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  entidad   String
  entidadId Int
  cambio    String
  fecha     DateTime @default(now())
  usuario   User     @relation(fields: [usuarioId], references: [id])
}

model NotaMateriaPeriodo {
  id           Int      @id @default(autoincrement())
  estudianteId Int
  materiaId    Int
  periodoId    Int
  valor        Float
  estudiante   User     @relation(fields: [estudianteId], references: [id])
  materia      Materia  @relation(fields: [materiaId], references: [id])
  periodo      Periodo  @relation(fields: [periodoId], references: [id])

  @@unique([estudianteId, materiaId, periodoId])
}

model MateriaGrado {
  id        Int     @id @default(autoincrement())
  materiaId Int
  gradoId   Int
  materia   Materia @relation(fields: [materiaId], references: [id])
  grado     Grado   @relation(fields: [gradoId], references: [id])
  materiaGradoDocentes MateriaGradoDocente[]

  @@unique([materiaId, gradoId])
}

model MateriaGradoDocente {
  id            Int     @id @default(autoincrement())
  materiaGradoId Int
  docenteId     Int
  periodoId     Int?
  materiaGrado  MateriaGrado @relation(fields: [materiaGradoId], references: [id])
  docente       User    @relation(fields: [docenteId], references: [id])
  periodo       Periodo? @relation(fields: [periodoId], references: [id])

  @@unique([materiaGradoId, docenteId, periodoId])
}

enum Role {
  ADMIN
  DOCENTE
  STUDENT
}
