{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/app/api/admin/docentes/%5Bid%5D/asignaciones/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// GET: Lista todas las asignaciones de un docente\r\nexport async function GET(request: Request, { params }: { params: { id: string } }) {\r\n  const docenteId = Number(params.id);\r\n  if (isNaN(docenteId)) return NextResponse.json({ error: 'ID inválido' }, { status: 400 });\r\n  try {\r\n    const asignaciones = await prisma.materiaGradoDocente.findMany({\r\n      where: { docenteId },\r\n      include: {\r\n        materiaGrado: {\r\n          include: {\r\n            materia: true,\r\n            grado: true,\r\n          },\r\n        },\r\n        periodo: true,\r\n      },\r\n    });\r\n    return NextResponse.json(asignaciones);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al obtener asignaciones' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST: Crear una nueva asignación (materia, grado, periodo)\r\nexport async function POST(request: Request, { params }: { params: { id: string } }) {\r\n  const docenteId = Number(params.id);\r\n  if (isNaN(docenteId)) return NextResponse.json({ error: 'ID inválido' }, { status: 400 });\r\n  try {\r\n    const { materiaId, gradoId, periodoId } = await request.json();\r\n    if (!materiaId || !gradoId || !periodoId) {\r\n      return NextResponse.json({ error: 'Faltan campos obligatorios' }, { status: 400 });\r\n    }\r\n    // Buscar o crear MateriaGrado\r\n    let materiaGrado = await prisma.materiaGrado.findFirst({ where: { materiaId, gradoId } });\r\n    if (!materiaGrado) {\r\n      materiaGrado = await prisma.materiaGrado.create({ data: { materiaId, gradoId } });\r\n    }\r\n    // Crear la asignación\r\n    const asignacion = await prisma.materiaGradoDocente.create({\r\n      data: {\r\n        materiaGradoId: materiaGrado.id,\r\n        docenteId,\r\n        periodoId,\r\n      },\r\n      include: {\r\n        materiaGrado: { include: { materia: true, grado: true } },\r\n        periodo: true,\r\n      },\r\n    });\r\n    return NextResponse.json(asignacion);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al crear asignación' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// DELETE: Eliminar una asignación\r\nexport async function DELETE(request: Request, { params }: { params: { id: string } }) {\r\n  const docenteId = Number(params.id);\r\n  if (isNaN(docenteId)) return NextResponse.json({ error: 'ID inválido' }, { status: 400 });\r\n  try {\r\n    const { materiaGradoDocenteId } = await request.json();\r\n    if (!materiaGradoDocenteId) return NextResponse.json({ error: 'Falta el id de la asignación' }, { status: 400 });\r\n    await prisma.materiaGradoDocente.delete({ where: { id: materiaGradoDocenteId, docenteId } });\r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al eliminar asignación' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6IAAY;AAGxB,eAAe,IAAI,OAAgB,EAAE,EAAE,MAAM,EAA8B;IAChF,MAAM,YAAY,OAAO,OAAO,EAAE;IAClC,IAAI,MAAM,YAAY,OAAO,gJAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAc,GAAG;QAAE,QAAQ;IAAI;IACvF,IAAI;QACF,MAAM,eAAe,MAAM,OAAO,mBAAmB,CAAC,QAAQ,CAAC;YAC7D,OAAO;gBAAE;YAAU;YACnB,SAAS;gBACP,cAAc;oBACZ,SAAS;wBACP,SAAS;wBACT,OAAO;oBACT;gBACF;gBACA,SAAS;YACX;QACF;QACA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgC,GAAG;YAAE,QAAQ;QAAI;IACrF;AACF;AAGO,eAAe,KAAK,OAAgB,EAAE,EAAE,MAAM,EAA8B;IACjF,MAAM,YAAY,OAAO,OAAO,EAAE;IAClC,IAAI,MAAM,YAAY,OAAO,gJAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAc,GAAG;QAAE,QAAQ;IAAI;IACvF,IAAI;QACF,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,MAAM,QAAQ,IAAI;QAC5D,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,WAAW;YACxC,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA6B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QACA,8BAA8B;QAC9B,IAAI,eAAe,MAAM,OAAO,YAAY,CAAC,SAAS,CAAC;YAAE,OAAO;gBAAE;gBAAW;YAAQ;QAAE;QACvF,IAAI,CAAC,cAAc;YACjB,eAAe,MAAM,OAAO,YAAY,CAAC,MAAM,CAAC;gBAAE,MAAM;oBAAE;oBAAW;gBAAQ;YAAE;QACjF;QACA,sBAAsB;QACtB,MAAM,aAAa,MAAM,OAAO,mBAAmB,CAAC,MAAM,CAAC;YACzD,MAAM;gBACJ,gBAAgB,aAAa,EAAE;gBAC/B;gBACA;YACF;YACA,SAAS;gBACP,cAAc;oBAAE,SAAS;wBAAE,SAAS;wBAAM,OAAO;oBAAK;gBAAE;gBACxD,SAAS;YACX;QACF;QACA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACjF;AACF;AAGO,eAAe,OAAO,OAAgB,EAAE,EAAE,MAAM,EAA8B;IACnF,MAAM,YAAY,OAAO,OAAO,EAAE;IAClC,IAAI,MAAM,YAAY,OAAO,gJAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAc,GAAG;QAAE,QAAQ;IAAI;IACvF,IAAI;QACF,MAAM,EAAE,qBAAqB,EAAE,GAAG,MAAM,QAAQ,IAAI;QACpD,IAAI,CAAC,uBAAuB,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA+B,GAAG;YAAE,QAAQ;QAAI;QAC9G,MAAM,OAAO,mBAAmB,CAAC,MAAM,CAAC;YAAE,OAAO;gBAAE,IAAI;gBAAuB;YAAU;QAAE;QAC1F,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,OAAO;QACd,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA+B,GAAG;YAAE,QAAQ;QAAI;IACpF;AACF","debugId":null}}]
}