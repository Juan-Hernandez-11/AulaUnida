{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ||\r\n  new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM;AAEC,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6IAAY;AAElB,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/lib/firebaseAdmin.ts"],"sourcesContent":["import { initializeApp, getApps, cert } from 'firebase-admin/app';\r\n\r\nexport function initFirebaseAdmin() {\r\n  if (!getApps().length) {\r\n    initializeApp({\r\n      credential: cert({\r\n        projectId: process.env.FIREBASE_PROJECT_ID,\r\n        clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\r\n        privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\\\n/g, '\\n'),\r\n      }),\r\n    });\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;;;;;;AAEO,SAAS;IACd,IAAI,CAAC,IAAA,2JAAO,IAAG,MAAM,EAAE;QACrB,IAAA,iKAAa,EAAC;YACZ,YAAY,IAAA,wJAAI,EAAC;gBACf,WAAW,QAAQ,GAAG,CAAC,mBAAmB;gBAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;gBAC9C,YAAY,QAAQ,GAAG,CAAC,oBAAoB,EAAE,QAAQ,QAAQ;YAChE;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/app/api/me/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { getAuth } from 'firebase-admin/auth';\r\nimport { prisma } from '@/lib/prisma';\r\nimport { initFirebaseAdmin } from '@/lib/firebaseAdmin';\r\n\r\ninitFirebaseAdmin();\r\n\r\nexport async function POST(req: NextRequest) {\r\n    const body = await req.json();\r\n    const { idToken } = body;\r\n\r\n    if (!idToken) {\r\n        return NextResponse.json({ error: 'Missing idToken' }, { status: 400 });\r\n    }\r\n\r\n    try {\r\n        const decodedToken = await getAuth().verifyIdToken(idToken);\r\n\r\n        let user = await prisma.user.findUnique({\r\n            where: { firebaseUid: decodedToken.uid },\r\n        });\r\n\r\n        if (!user) {\r\n            user = await prisma.user.create({\r\n                data: {\r\n                    firebaseUid: decodedToken.uid,\r\n                    email: decodedToken.email ?? '',\r\n                    role: 'STUDENT',\r\n                    passwordHash: '',\r\n                },\r\n            });\r\n        }\r\n\r\n        return NextResponse.json({\r\n            id: user.id,\r\n            name: user.name,\r\n            email: user.email,\r\n            role: user.role,\r\n            firebaseUid: user.firebaseUid,\r\n        });\r\n    } catch (error: any) {\r\n        return NextResponse.json({ error: 'Token invalido', details: error.message }, { status: 401 });\r\n    }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;;;;;;AAEA,IAAA,kJAAiB;AAEV,eAAe,KAAK,GAAgB;IACvC,MAAM,OAAO,MAAM,IAAI,IAAI;IAC3B,MAAM,EAAE,OAAO,EAAE,GAAG;IAEpB,IAAI,CAAC,SAAS;QACV,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAkB,GAAG;YAAE,QAAQ;QAAI;IACzE;IAEA,IAAI;QACA,MAAM,eAAe,MAAM,IAAA,6JAAO,IAAG,aAAa,CAAC;QAEnD,IAAI,OAAO,MAAM,gIAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACpC,OAAO;gBAAE,aAAa,aAAa,GAAG;YAAC;QAC3C;QAEA,IAAI,CAAC,MAAM;YACP,OAAO,MAAM,gIAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBAC5B,MAAM;oBACF,aAAa,aAAa,GAAG;oBAC7B,OAAO,aAAa,KAAK,IAAI;oBAC7B,MAAM;oBACN,cAAc;gBAClB;YACJ;QACJ;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACrB,IAAI,KAAK,EAAE;YACX,MAAM,KAAK,IAAI;YACf,OAAO,KAAK,KAAK;YACjB,MAAM,KAAK,IAAI;YACf,aAAa,KAAK,WAAW;QACjC;IACJ,EAAE,OAAO,OAAY;QACjB,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;YAAkB,SAAS,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IAChG;AACJ","debugId":null}}]
}