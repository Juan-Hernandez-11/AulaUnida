{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/app/api/admin/matricula/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { PrismaClient } from '@prisma/client';\r\nconst prisma = new PrismaClient();\r\n\r\n\r\n/**\r\n * GET /api/admin/matricula?gradoId=ID\r\n * Lista los estudiantes matriculados en un grado específico.\r\n * Query params:\r\n *   - gradoId: number (obligatorio)\r\n * Responde: [{ id, name, email }]\r\n */\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    const gradoId = Number(req.nextUrl.searchParams.get('gradoId'));\r\n    if (!gradoId) return NextResponse.json([], { status: 200 });\r\n    const matriculas = await prisma.gradoEstudiante.findMany({\r\n      where: { gradoId },\r\n      include: { estudiante: true },\r\n    });\r\n    return NextResponse.json(matriculas.map((m: any) => ({\r\n      id: m.estudiante.id,\r\n      name: m.estudiante.name,\r\n      email: m.estudiante.email,\r\n    })));\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al obtener matrículas' }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * POST /api/admin/matricula\r\n * Matricula un estudiante en un grado.\r\n * Body: { gradoId: number, estudianteId: number }\r\n * Responde: { id, name, email } del estudiante matriculado\r\n */\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const { gradoId, estudianteId } = await req.json();\r\n    if (\r\n      typeof gradoId !== 'number' || isNaN(gradoId) ||\r\n      typeof estudianteId !== 'number' || isNaN(estudianteId)\r\n    ) {\r\n      return NextResponse.json({ error: 'gradoId y estudianteId deben ser números válidos.' }, { status: 400 });\r\n    }\r\n    // Validar existencia de grado\r\n    const grado = await prisma.grado.findUnique({ where: { id: gradoId } });\r\n    if (!grado) {\r\n      return NextResponse.json({ error: 'El grado especificado no existe.' }, { status: 404 });\r\n    }\r\n    // Validar que el usuario sea estudiante\r\n    const user = await prisma.user.findUnique({ where: { id: estudianteId } });\r\n    if (!user) {\r\n      return NextResponse.json({ error: 'El usuario no existe.' }, { status: 404 });\r\n    }\r\n    if (user.role !== 'STUDENT') {\r\n      return NextResponse.json({ error: 'Solo se pueden matricular usuarios con rol estudiante.' }, { status: 400 });\r\n    }\r\n    // Verifica si ya está matriculado\r\n    const existe = await prisma.gradoEstudiante.findFirst({\r\n      where: { gradoId, estudianteId },\r\n    });\r\n    if (existe) {\r\n      return NextResponse.json({ error: 'El estudiante ya está matriculado en este grado.' }, { status: 409 });\r\n    }\r\n    const matricula = await prisma.gradoEstudiante.create({\r\n      data: { gradoId, estudianteId },\r\n      include: { estudiante: true },\r\n    });\r\n    return NextResponse.json({\r\n      id: matricula.estudiante.id,\r\n      name: matricula.estudiante.name,\r\n      email: matricula.estudiante.email,\r\n    });\r\n  } catch (error: any) {\r\n    if (error.code && error.code.startsWith('P')) {\r\n      return NextResponse.json({ error: 'Error de base de datos: ' + error.message }, { status: 500 });\r\n    }\r\n    return NextResponse.json({ error: 'Error inesperado al matricular estudiante.' }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * DELETE /api/admin/matricula\r\n * Elimina la matrícula de un estudiante en un grado.\r\n * Body: { gradoId: number, estudianteId: number }\r\n * Responde: { ok: true }\r\n */\r\nexport async function DELETE(req: NextRequest) {\r\n  try {\r\n    const { gradoId, estudianteId } = await req.json();\r\n    if (\r\n      typeof gradoId !== 'number' || isNaN(gradoId) ||\r\n      typeof estudianteId !== 'number' || isNaN(estudianteId)\r\n    ) {\r\n      return NextResponse.json({ error: 'gradoId y estudianteId deben ser números válidos.' }, { status: 400 });\r\n    }\r\n    // Validar existencia de grado\r\n    const grado = await prisma.grado.findUnique({ where: { id: gradoId } });\r\n    if (!grado) {\r\n      return NextResponse.json({ error: 'El grado especificado no existe.' }, { status: 404 });\r\n    }\r\n    // Validar existencia de usuario\r\n    const user = await prisma.user.findUnique({ where: { id: estudianteId } });\r\n    if (!user) {\r\n      return NextResponse.json({ error: 'El usuario no existe.' }, { status: 404 });\r\n    }\r\n    await prisma.gradoEstudiante.deleteMany({\r\n      where: { gradoId, estudianteId },\r\n    });\r\n    return NextResponse.json({ ok: true });\r\n  } catch (error: any) {\r\n    if (error.code && error.code.startsWith('P')) {\r\n      return NextResponse.json({ error: 'Error de base de datos: ' + error.message }, { status: 500 });\r\n    }\r\n    return NextResponse.json({ error: 'Error al eliminar matrícula' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}