{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/lib/firebaseAdmin.ts"],"sourcesContent":["import { initializeApp, getApps, cert } from 'firebase-admin/app';\r\n\r\nexport function initFirebaseAdmin() {\r\n  if (!getApps().length) {\r\n    initializeApp({\r\n      credential: cert({\r\n        projectId: process.env.FIREBASE_PROJECT_ID,\r\n        clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\r\n        privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\\\n/g, '\\n'),\r\n      }),\r\n    });\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;;;;;;AAEO,SAAS;IACd,IAAI,CAAC,IAAA,2JAAO,IAAG,MAAM,EAAE;QACrB,IAAA,iKAAa,EAAC;YACZ,YAAY,IAAA,wJAAI,EAAC;gBACf,WAAW,QAAQ,GAAG,CAAC,mBAAmB;gBAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;gBAC9C,YAAY,QAAQ,GAAG,CAAC,oBAAoB,EAAE,QAAQ,QAAQ;YAChE;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ||\r\n  new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM;AAEC,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6IAAY;AAElB,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/app/api/docente/asignaciones/route.ts"],"sourcesContent":["\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getAuth } from 'firebase-admin/auth';\r\nimport { initFirebaseAdmin } from '@/lib/firebaseAdmin';\r\nimport { prisma } from '../../../../lib/prisma';\r\n\r\ninitFirebaseAdmin();\r\n\r\n// GET: Devuelve los grados y asignaturas asignados al docente autenticado\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    const authHeader = req.headers.get('authorization');\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n      return NextResponse.json({ error: 'No autorizado (token faltante)' }, { status: 401 });\r\n    }\r\n    const idToken = authHeader.replace('Bearer ', '');\r\n    const decoded = await getAuth().verifyIdToken(idToken);\r\n    // Busca el usuario en la base de datos y verifica el rol\r\n    const user = await prisma.user.findUnique({\r\n      where: { firebaseUid: decoded.uid },\r\n      select: { id: true, email: true, role: true },\r\n    });\r\n    if (!user || user.role !== 'DOCENTE') {\r\n      return NextResponse.json({ error: 'No autorizado (solo docente)' }, { status: 403 });\r\n    }\r\n    const docenteId = user.id;\r\n    // Buscar asignaciones del docente, trayendo materiaGrado, materia, grado y ciclo\r\n    const asignaciones = await prisma.materiaGradoDocente.findMany({\r\n      where: { docenteId },\r\n      include: {\r\n        materiaGrado: {\r\n          include: {\r\n            materia: true,\r\n            grado: { include: { ciclo: true } },\r\n          },\r\n        },\r\n      },\r\n    });\r\n    // Formatear para frontend\r\n    const resultado = asignaciones.map(a => ({\r\n      id: a.id,\r\n      materiaGradoId: a.materiaGradoId,\r\n      materiaId: a.materiaGrado.materiaId,\r\n      gradoId: a.materiaGrado.gradoId,\r\n      cicloId: a.materiaGrado.grado.cicloId,\r\n      materia: a.materiaGrado.materia,\r\n      grado: a.materiaGrado.grado,\r\n      ciclo: a.materiaGrado.grado.ciclo,\r\n    }));\r\n    return NextResponse.json(resultado);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'No autorizado (token inv√°lido)' }, { status: 401 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;;;;;;;;;;AAEA,IAAA,kJAAiB;AAGV,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,MAAM,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC;QACnC,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CAAC,YAAY;YACpD,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiC,GAAG;gBAAE,QAAQ;YAAI;QACtF;QACA,MAAM,UAAU,WAAW,OAAO,CAAC,WAAW;QAC9C,MAAM,UAAU,MAAM,IAAA,6JAAO,IAAG,aAAa,CAAC;QAC9C,yDAAyD;QACzD,MAAM,OAAO,MAAM,gIAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE,aAAa,QAAQ,GAAG;YAAC;YAClC,QAAQ;gBAAE,IAAI;gBAAM,OAAO;gBAAM,MAAM;YAAK;QAC9C;QACA,IAAI,CAAC,QAAQ,KAAK,IAAI,KAAK,WAAW;YACpC,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA+B,GAAG;gBAAE,QAAQ;YAAI;QACpF;QACA,MAAM,YAAY,KAAK,EAAE;QACzB,iFAAiF;QACjF,MAAM,eAAe,MAAM,gIAAM,CAAC,mBAAmB,CAAC,QAAQ,CAAC;YAC7D,OAAO;gBAAE;YAAU;YACnB,SAAS;gBACP,cAAc;oBACZ,SAAS;wBACP,SAAS;wBACT,OAAO;4BAAE,SAAS;gCAAE,OAAO;4BAAK;wBAAE;oBACpC;gBACF;YACF;QACF;QACA,0BAA0B;QAC1B,MAAM,YAAY,aAAa,GAAG,CAAC,CAAA,IAAK,CAAC;gBACvC,IAAI,EAAE,EAAE;gBACR,gBAAgB,EAAE,cAAc;gBAChC,WAAW,EAAE,YAAY,CAAC,SAAS;gBACnC,SAAS,EAAE,YAAY,CAAC,OAAO;gBAC/B,SAAS,EAAE,YAAY,CAAC,KAAK,CAAC,OAAO;gBACrC,SAAS,EAAE,YAAY,CAAC,OAAO;gBAC/B,OAAO,EAAE,YAAY,CAAC,KAAK;gBAC3B,OAAO,EAAE,YAAY,CAAC,KAAK,CAAC,KAAK;YACnC,CAAC;QACD,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiC,GAAG;YAAE,QAAQ;QAAI;IACtF;AACF","debugId":null}}]
}