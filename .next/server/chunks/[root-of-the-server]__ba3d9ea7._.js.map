{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/app/api/user-role/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// GET /api/user-role?uid=FIREBASE_UID\r\nexport async function GET(request: Request) {\r\n  const { searchParams } = new URL(request.url);\r\n  const firebaseUid = searchParams.get('uid');\r\n\r\n  if (!firebaseUid) {\r\n    return NextResponse.json({ error: 'Missing uid parameter' }, { status: 400 });\r\n  }\r\n\r\n  try {\r\n    const user = await prisma.user.findUnique({\r\n      where: { firebaseUid },\r\n      select: { role: true },\r\n    });\r\n    if (!user) {\r\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\r\n    }\r\n    return NextResponse.json({ role: user.role });\r\n  } catch (error) {\r\n    console.error('Error en /api/user-role:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6IAAY;AAGxB,eAAe,IAAI,OAAgB;IACxC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,cAAc,aAAa,GAAG,CAAC;IAErC,IAAI,CAAC,aAAa;QAChB,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;IAEA,IAAI;QACF,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE;YAAY;YACrB,QAAQ;gBAAE,MAAM;YAAK;QACvB;QACA,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QACA,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,MAAM,KAAK,IAAI;QAAC;IAC7C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}