{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/app/api/admin/sedes/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// GET: Devuelve todas las sedes (id, nombre, direccion)\r\nexport async function GET() {\r\n  try {\r\n    const sedes = await prisma.sede.findMany({\r\n      select: { id: true, nombre: true, direccion: true },\r\n      orderBy: { nombre: 'asc' },\r\n    });\r\n    return NextResponse.json(sedes);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al obtener sedes' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST: Crea una sede. Body: { nombre, direccion }\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const { nombre, direccion } = await request.json();\r\n    if (\r\n      typeof nombre !== 'string' || !nombre.trim() ||\r\n      typeof direccion !== 'string' || !direccion.trim()\r\n    ) {\r\n      return NextResponse.json({ error: 'Faltan campos obligatorios o tipos incorrectos' }, { status: 400 });\r\n    }\r\n    // Validar unicidad de nombre\r\n    const existe = await prisma.sede.findFirst({ where: { nombre: nombre.trim() } });\r\n    if (existe) {\r\n      return NextResponse.json({ error: 'Ya existe una sede con ese nombre.' }, { status: 409 });\r\n    }\r\n    const sede = await prisma.sede.create({\r\n      data: { nombre: nombre.trim(), direccion: direccion.trim() },\r\n      select: { id: true, nombre: true, direccion: true },\r\n    });\r\n    return NextResponse.json(sede);\r\n  } catch (error: any) {\r\n    if (error.code && error.code.startsWith('P')) {\r\n      return NextResponse.json({ error: 'Error de base de datos: ' + error.message }, { status: 500 });\r\n    }\r\n    return NextResponse.json({ error: 'Error al crear sede' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// PUT: Edita una sede. Body: { id, nombre, direccion }\r\nexport async function PUT(request: Request) {\r\n  try {\r\n    const { id, nombre, direccion } = await request.json();\r\n    if (\r\n      typeof id !== 'number' || isNaN(id) ||\r\n      typeof nombre !== 'string' || !nombre.trim() ||\r\n      typeof direccion !== 'string' || !direccion.trim()\r\n    ) {\r\n      return NextResponse.json({ error: 'Faltan campos obligatorios o tipos incorrectos' }, { status: 400 });\r\n    }\r\n    // Validar unicidad de nombre (excluyendo la propia sede)\r\n    const existe = await prisma.sede.findFirst({ where: { nombre: nombre.trim(), NOT: { id } } });\r\n    if (existe) {\r\n      return NextResponse.json({ error: 'Ya existe una sede con ese nombre.' }, { status: 409 });\r\n    }\r\n    const sede = await prisma.sede.update({\r\n      where: { id },\r\n      data: { nombre: nombre.trim(), direccion: direccion.trim() },\r\n      select: { id: true, nombre: true, direccion: true },\r\n    });\r\n    return NextResponse.json(sede);\r\n  } catch (error: any) {\r\n    if (error.code && error.code.startsWith('P')) {\r\n      return NextResponse.json({ error: 'Error de base de datos: ' + error.message }, { status: 500 });\r\n    }\r\n    return NextResponse.json({ error: 'Error al editar sede' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// DELETE: Elimina una sede. Body: { id }\r\nexport async function DELETE(request: Request) {\r\n  try {\r\n    const { id } = await request.json();\r\n    if (typeof id !== 'number' || isNaN(id)) {\r\n      return NextResponse.json({ error: 'Falta el id o el id no es v√°lido' }, { status: 400 });\r\n    }\r\n    await prisma.sede.delete({ where: { id } });\r\n    return NextResponse.json({ success: true });\r\n  } catch (error: any) {\r\n    if (error.code && error.code.startsWith('P')) {\r\n      return NextResponse.json({ error: 'Error de base de datos: ' + error.message }, { status: 500 });\r\n    }\r\n    return NextResponse.json({ error: 'Error al eliminar sede' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}