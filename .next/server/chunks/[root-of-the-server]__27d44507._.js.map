{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juant/Documents/proyectoCUN/aulaunida/src/app/api/admin/grados/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// GET: Lista todos los grados\r\nexport async function GET() {\r\n  try {\r\n    const grados = await prisma.grado.findMany({\r\n      select: { id: true, nombre: true, seccion: true },\r\n      orderBy: { nombre: 'asc' },\r\n    });\r\n    return NextResponse.json(grados);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al obtener grados' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST: Crear un nuevo grado\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const { nombre, seccion, sedeId, cicloId, aulaId } = await request.json();\r\n    if (!nombre || !seccion || !sedeId || !cicloId) {\r\n      return NextResponse.json({ error: 'Faltan campos obligatorios' }, { status: 400 });\r\n    }\r\n    const grado = await prisma.grado.create({\r\n      data: { nombre, seccion, sedeId: Number(sedeId), cicloId: Number(cicloId), aulaId: aulaId ? Number(aulaId) : undefined },\r\n      select: { id: true, nombre: true, seccion: true },\r\n    });\r\n    return NextResponse.json(grado);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al crear grado' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// PUT: Editar un grado existente\r\nexport async function PUT(request: Request) {\r\n  try {\r\n    const { id, nombre, seccion, sedeId, cicloId, aulaId } = await request.json();\r\n    if (!id || !nombre || !seccion || !sedeId || !cicloId) {\r\n      return NextResponse.json({ error: 'Faltan campos obligatorios' }, { status: 400 });\r\n    }\r\n    const grado = await prisma.grado.update({\r\n      where: { id: Number(id) },\r\n      data: { nombre, seccion, sedeId: Number(sedeId), cicloId: Number(cicloId), aulaId: aulaId ? Number(aulaId) : undefined },\r\n      select: { id: true, nombre: true, seccion: true },\r\n    });\r\n    return NextResponse.json(grado);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al editar grado' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// DELETE: Eliminar un grado\r\nexport async function DELETE(request: Request) {\r\n  try {\r\n    const { id } = await request.json();\r\n    if (!id) {\r\n      return NextResponse.json({ error: 'Falta el id' }, { status: 400 });\r\n    }\r\n    await prisma.grado.delete({ where: { id: Number(id) } });\r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Error al eliminar grado' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6IAAY;AAGxB,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC,QAAQ,CAAC;YACzC,QAAQ;gBAAE,IAAI;gBAAM,QAAQ;gBAAM,SAAS;YAAK;YAChD,SAAS;gBAAE,QAAQ;YAAM;QAC3B;QACA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA0B,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF;AAGO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,MAAM,QAAQ,IAAI;QACvE,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,SAAS;YAC9C,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA6B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QACA,MAAM,QAAQ,MAAM,OAAO,KAAK,CAAC,MAAM,CAAC;YACtC,MAAM;gBAAE;gBAAQ;gBAAS,QAAQ,OAAO;gBAAS,SAAS,OAAO;gBAAU,QAAQ,SAAS,OAAO,UAAU;YAAU;YACvH,QAAQ;gBAAE,IAAI;gBAAM,QAAQ;gBAAM,SAAS;YAAK;QAClD;QACA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF;AAGO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,MAAM,QAAQ,IAAI;QAC3E,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,SAAS;YACrD,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA6B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QACA,MAAM,QAAQ,MAAM,OAAO,KAAK,CAAC,MAAM,CAAC;YACtC,OAAO;gBAAE,IAAI,OAAO;YAAI;YACxB,MAAM;gBAAE;gBAAQ;gBAAS,QAAQ,OAAO;gBAAS,SAAS,OAAO;gBAAU,QAAQ,SAAS,OAAO,UAAU;YAAU;YACvH,QAAQ;gBAAE,IAAI;gBAAM,QAAQ;gBAAM,SAAS;YAAK;QAClD;QACA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF;AAGO,eAAe,OAAO,OAAgB;IAC3C,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,QAAQ,IAAI;QACjC,IAAI,CAAC,IAAI;YACP,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAc,GAAG;gBAAE,QAAQ;YAAI;QACnE;QACA,MAAM,OAAO,KAAK,CAAC,MAAM,CAAC;YAAE,OAAO;gBAAE,IAAI,OAAO;YAAI;QAAE;QACtD,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,OAAO;QACd,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA0B,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF","debugId":null}}]
}